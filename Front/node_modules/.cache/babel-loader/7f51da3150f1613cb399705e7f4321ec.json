{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { ADD_FAVOURITE, FETCH_ALL_CONTACT_SUCCESS, FILTER_CONTACT, GET_ALL_CONTACT, GET_UNSELECTED_ALL_CONTACT, HANDLE_REQUEST_CLOSE, HIDE_CONTACT_LOADER, ON_ADD_CONTACT, ON_ALL_CONTACT_SELECT, ON_CONTACT_CLOSE, ON_CONTACT_SELECT, ON_DELETE_CONTACT, ON_DELETE_SELECTED_CONTACT, ON_FILTER_OPTION_SELECT, ON_SAVE_CONTACT, ON_TOGGLE_DRAWER, SHOW_MESSAGE, UPDATE_SEARCH_USER } from 'constants/ActionTypes';\nimport data from 'app/routes/contact/data/contactList';\nvar INIT_STATE = {\n  alertMessage: '',\n  showMessage: false,\n  loader: true,\n  noContentFoundMessage: 'No contact found in selected folder',\n  selectedSectionId: 1,\n  drawerState: false,\n  user: {\n    name: 'Robert Johnson',\n    email: 'robert.johnson@example.com',\n    avatar: 'https://via.placeholder.com/150x150'\n  },\n  searchUser: '',\n  filterOption: 'All contacts',\n  // allContact: [],\n  // contactList: [], //only for prod\n  allContact: data,\n  contactList: data,\n  selectedContact: null,\n  selectedContacts: 0,\n  addContactState: false\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INIT_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_FAVOURITE:\n      {\n        return _objectSpread({}, state, {\n          alertMessage: action.payload.starred ? 'Contact removed as star' : 'Contact marked as star',\n          showMessage: true,\n          contactList: state.contactList.map(function (contact) {\n            return contact.id === action.payload.id ? _objectSpread({}, contact, {\n              starred: !action.payload.starred\n            }) : contact;\n          }),\n          allContact: state.allContact.map(function (contact) {\n            return contact.id === action.payload.id ? _objectSpread({}, contact, {\n              starred: !action.payload.starred\n            }) : contact;\n          })\n        });\n      }\n\n    case FETCH_ALL_CONTACT_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          loader: false,\n          allContact: action.payload,\n          contactList: action.payload\n        });\n      }\n\n    case SHOW_MESSAGE:\n      {\n        return _objectSpread({}, state, {\n          alertMessage: action.payload,\n          showMessage: true,\n          loader: false\n        });\n      }\n\n    case ON_CONTACT_SELECT:\n      {\n        action.payload.selected = !action.payload.selected;\n        var selectedContacts = 0;\n        var contactList = state.contactList.map(function (contact) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n\n          if (contact.id === action.payload.id) {\n            if (contact.selected) {\n              selectedContacts++;\n            }\n\n            return action.payload;\n          } else {\n            return contact;\n          }\n        });\n        return _objectSpread({}, state, {\n          INIT_STATE: INIT_STATE,\n          selectedContacts: selectedContacts,\n          contactList: contactList\n        });\n      }\n\n    case ON_ADD_CONTACT:\n      {\n        return _objectSpread({}, state, {\n          addContactState: true\n        });\n      }\n\n    case ON_CONTACT_CLOSE:\n      {\n        return _objectSpread({}, state, {\n          addContactState: false\n        });\n      }\n\n    case ON_FILTER_OPTION_SELECT:\n      {\n        var selectedSectionId = 0;\n        var filterOption = '';\n        var _contactList = [];\n\n        switch (action.payload.name) {\n          case 'All contacts':\n            {\n              selectedSectionId = action.payload.id;\n              filterOption = action.payload.name;\n              _contactList = state.allContact;\n              break;\n            }\n\n          case 'Frequently contacted':\n            {\n              selectedSectionId = action.payload.id;\n              filterOption = action.payload.name;\n              _contactList = state.allContact.filter(function (contact) {\n                return contact.frequently;\n              });\n              break;\n            }\n\n          case 'Starred contacts':\n            {\n              selectedSectionId = action.payload.id;\n              filterOption = action.payload.name;\n              _contactList = state.allContact.filter(function (contact) {\n                return contact.starred;\n              });\n              break;\n            }\n\n          default:\n            {\n              selectedSectionId = action.payload.id;\n              filterOption = action.payload.name;\n              _contactList = state.allContact;\n              break;\n            }\n        }\n\n        return _objectSpread({}, state, {\n          selectedSectionId: selectedSectionId,\n          filterOption: filterOption,\n          contactList: _contactList,\n          drawerState: false\n        });\n      }\n\n    case ON_SAVE_CONTACT:\n      {\n        var isNew = true;\n\n        var _contactList2 = state.allContact.map(function (contact) {\n          if (contact.id === action.payload.id) {\n            isNew = false;\n            return action.payload;\n          } else {\n            return contact;\n          }\n        });\n\n        if (isNew) {\n          _contactList2.push(action.payload);\n        }\n\n        return _objectSpread({}, state, {\n          alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n          showMessage: true,\n          contactList: _contactList2,\n          allContact: _contactList2\n        });\n      }\n\n    case ON_DELETE_CONTACT:\n      {\n        return _objectSpread({}, state, {\n          alertMessage: 'Contact Deleted Successfully',\n          showMessage: true,\n          allContact: state.allContact.filter(function (contact) {\n            return contact.id !== action.payload.id;\n          }),\n          contactList: state.allContact.filter(function (contact) {\n            return contact.id !== action.payload.id;\n          })\n        });\n      }\n\n    case ON_DELETE_SELECTED_CONTACT:\n      {\n        var contacts = state.allContact.filter(function (contact) {\n          return !contact.selected;\n        });\n        return _objectSpread({}, state, {\n          alertMessage: 'Contact Deleted Successfully',\n          showMessage: true,\n          allContact: contacts,\n          contactList: contacts,\n          selectedContacts: 0\n        });\n      }\n\n    case FILTER_CONTACT:\n      {\n        var _filterOption = state.filterOption;\n        var _contactList3 = [];\n\n        if (action.payload === '') {\n          _contactList3 = state.allContact;\n        } else {\n          var filterContact = state.allContact.filter(function (contact) {\n            return contact.name.toLowerCase().indexOf(action.payload.toLowerCase()) > -1;\n          });\n\n          if (_filterOption === 'All contacts') {\n            _contactList3 = filterContact;\n          } else if (_filterOption === 'Frequently contacted') {\n            _contactList3 = filterContact.filter(function (contact) {\n              return contact.frequently;\n            });\n          } else if (_filterOption === 'Starred contacts') {\n            _contactList3 = filterContact.filter(function (contact) {\n              return contact.starred;\n            });\n          }\n        }\n\n        return _objectSpread({}, state, {\n          contactList: _contactList3\n        });\n      }\n\n    case GET_ALL_CONTACT:\n      {\n        var _contactList4 = state.allContact.map(function (contact) {\n          return contact ? _objectSpread({}, contact, {\n            selected: true\n          }) : contact;\n        });\n\n        return _objectSpread({}, state, {\n          selectedContacts: _contactList4.length,\n          allContact: _contactList4,\n          contactList: _contactList4\n        });\n      }\n\n    case GET_UNSELECTED_ALL_CONTACT:\n      {\n        var _contactList5 = state.allContact.map(function (contact) {\n          return contact ? _objectSpread({}, contact, {\n            selected: false\n          }) : contact;\n        });\n\n        return _objectSpread({}, state, {\n          selectedContacts: 0,\n          allContact: _contactList5,\n          contactList: _contactList5\n        });\n      }\n\n    case ON_ALL_CONTACT_SELECT:\n      {\n        var selectAll = state.selectedContacts < state.contactList.length;\n        var _selectedContacts = 0;\n        var _contactList6 = [];\n\n        if (selectAll) {\n          _contactList6 = state.allContact.map(function (contact) {\n            return contact ? _objectSpread({}, contact, {\n              selected: true\n            }) : contact;\n          });\n          _selectedContacts = _contactList6.length;\n        } else {\n          _contactList6 = state.allContact.map(function (contact) {\n            return contact ? _objectSpread({}, contact, {\n              selected: true\n            }) : contact;\n          });\n          _selectedContacts = 0;\n        }\n\n        return _objectSpread({}, state, {\n          selectedContacts: _selectedContacts,\n          allContact: _contactList6,\n          contactList: _contactList6\n        });\n      }\n\n    case UPDATE_SEARCH_USER:\n      {\n        return _objectSpread({}, state, {\n          searchUser: action.payload\n        });\n      }\n\n    case HANDLE_REQUEST_CLOSE:\n      {\n        return _objectSpread({}, state, {\n          showMessage: false\n        });\n      }\n\n    case ON_TOGGLE_DRAWER:\n      {\n        return _objectSpread({}, state, {\n          drawerState: !state.drawerState\n        });\n      }\n\n    case HIDE_CONTACT_LOADER:\n      {\n        return _objectSpread({}, state, {\n          loader: false\n        });\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:\\Users\\Noelia\\Desktop\\compra\\source\\src\\reducers\\Contact.js"],"names":["ADD_FAVOURITE","FETCH_ALL_CONTACT_SUCCESS","FILTER_CONTACT","GET_ALL_CONTACT","GET_UNSELECTED_ALL_CONTACT","HANDLE_REQUEST_CLOSE","HIDE_CONTACT_LOADER","ON_ADD_CONTACT","ON_ALL_CONTACT_SELECT","ON_CONTACT_CLOSE","ON_CONTACT_SELECT","ON_DELETE_CONTACT","ON_DELETE_SELECTED_CONTACT","ON_FILTER_OPTION_SELECT","ON_SAVE_CONTACT","ON_TOGGLE_DRAWER","SHOW_MESSAGE","UPDATE_SEARCH_USER","data","INIT_STATE","alertMessage","showMessage","loader","noContentFoundMessage","selectedSectionId","drawerState","user","name","email","avatar","searchUser","filterOption","allContact","contactList","selectedContact","selectedContacts","addContactState","state","action","type","payload","starred","map","contact","id","selected","filter","frequently","isNew","push","contacts","filterContact","toLowerCase","indexOf","length","selectAll"],"mappings":"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","sourcesContent":["import {\r\n  ADD_FAVOURITE,\r\n  FETCH_ALL_CONTACT_SUCCESS,\r\n  FILTER_CONTACT,\r\n  GET_ALL_CONTACT,\r\n  GET_UNSELECTED_ALL_CONTACT,\r\n  HANDLE_REQUEST_CLOSE,\r\n  HIDE_CONTACT_LOADER,\r\n  ON_ADD_CONTACT,\r\n  ON_ALL_CONTACT_SELECT,\r\n  ON_CONTACT_CLOSE,\r\n  ON_CONTACT_SELECT,\r\n  ON_DELETE_CONTACT,\r\n  ON_DELETE_SELECTED_CONTACT,\r\n  ON_FILTER_OPTION_SELECT,\r\n  ON_SAVE_CONTACT,\r\n  ON_TOGGLE_DRAWER,\r\n  SHOW_MESSAGE,\r\n  UPDATE_SEARCH_USER\r\n} from 'constants/ActionTypes';\r\nimport data from 'app/routes/contact/data/contactList'\r\n\r\nconst INIT_STATE = {\r\n  alertMessage: '',\r\n  showMessage: false,\r\n  loader: true,\r\n  noContentFoundMessage: 'No contact found in selected folder',\r\n  selectedSectionId: 1,\r\n  drawerState: false,\r\n  user: {\r\n    name: 'Robert Johnson',\r\n    email: 'robert.johnson@example.com',\r\n    avatar:  'https://via.placeholder.com/150x150'\r\n  },\r\n  searchUser: '',\r\n  filterOption: 'All contacts',\r\n  // allContact: [],\r\n  // contactList: [], //only for prod\r\n  allContact: data,\r\n  contactList: data,\r\n  selectedContact: null,\r\n  selectedContacts: 0,\r\n  addContactState: false,\r\n};\r\n\r\nexport default (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    case ADD_FAVOURITE: {\r\n      return {\r\n        ...state,\r\n        alertMessage: action.payload.starred ? 'Contact removed as star' : 'Contact marked as star',\r\n        showMessage: true,\r\n        contactList: state.contactList.map((contact) => contact.id === action.payload.id ? {\r\n          ...contact,\r\n          starred: !action.payload.starred\r\n        } : contact),\r\n        allContact: state.allContact.map((contact) => contact.id === action.payload.id ? {\r\n          ...contact,\r\n          starred: !action.payload.starred\r\n        } : contact)\r\n      };\r\n    }\r\n    case FETCH_ALL_CONTACT_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        loader: false,\r\n        allContact: action.payload,\r\n        contactList: action.payload,\r\n      }\r\n    }\r\n    case SHOW_MESSAGE: {\r\n      return {\r\n        ...state,\r\n        alertMessage: action.payload,\r\n        showMessage: true,\r\n        loader: false\r\n      }\r\n    }\r\n    case ON_CONTACT_SELECT: {\r\n      action.payload.selected = !action.payload.selected;\r\n      let selectedContacts = 0;\r\n      const contactList = state.contactList.map(contact => {\r\n          if (contact.selected) {\r\n            selectedContacts++;\r\n          }\r\n          if (contact.id === action.payload.id) {\r\n            if (contact.selected) {\r\n              selectedContacts++;\r\n            }\r\n            return action.payload;\r\n          } else {\r\n            return contact;\r\n          }\r\n        }\r\n      );\r\n      return {\r\n        ...state, INIT_STATE,\r\n        selectedContacts: selectedContacts,\r\n        contactList: contactList\r\n      };\r\n    }\r\n    case ON_ADD_CONTACT: {\r\n      return {...state, addContactState: true};\r\n    }\r\n    case ON_CONTACT_CLOSE: {\r\n      return {...state, addContactState: false};\r\n    }\r\n    case ON_FILTER_OPTION_SELECT: {\r\n      let selectedSectionId = 0;\r\n      let filterOption = '';\r\n      let contactList = [];\r\n      switch (action.payload.name) {\r\n        case 'All contacts': {\r\n          selectedSectionId = action.payload.id;\r\n          filterOption = action.payload.name;\r\n          contactList = state.allContact;\r\n          break;\r\n        }\r\n        case 'Frequently contacted': {\r\n          selectedSectionId = action.payload.id;\r\n          filterOption = action.payload.name;\r\n          contactList = state.allContact.filter((contact) => contact.frequently);\r\n          break;\r\n        }\r\n        case 'Starred contacts': {\r\n          selectedSectionId = action.payload.id;\r\n          filterOption = action.payload.name;\r\n          contactList = state.allContact.filter((contact) => contact.starred);\r\n          break;\r\n        }\r\n\r\n        default:{\r\n          selectedSectionId = action.payload.id;\r\n          filterOption = action.payload.name;\r\n          contactList = state.allContact;\r\n          break;\r\n        }\r\n      }\r\n      return {\r\n        ...state, selectedSectionId, filterOption, contactList, drawerState: false\r\n      };\r\n    }\r\n    case ON_SAVE_CONTACT: {\r\n      let isNew = true;\r\n      const contactList = state.allContact.map((contact) => {\r\n        if (contact.id === action.payload.id) {\r\n          isNew = false;\r\n          return action.payload\r\n        } else {\r\n          return contact\r\n        }\r\n      });\r\n      if (isNew) {\r\n        contactList.push(action.payload);\r\n      }\r\n      return {\r\n        ...state,\r\n        alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\r\n        showMessage: true,\r\n        contactList: contactList,\r\n        allContact: contactList,\r\n      }\r\n    }\r\n    case ON_DELETE_CONTACT: {\r\n      return {\r\n        ...state,\r\n        alertMessage: 'Contact Deleted Successfully',\r\n        showMessage: true,\r\n        allContact: state.allContact.filter((contact) => contact.id !== action.payload.id),\r\n        contactList: state.allContact.filter((contact) => contact.id !== action.payload.id),\r\n      }\r\n    }\r\n    case ON_DELETE_SELECTED_CONTACT: {\r\n      const contacts = state.allContact.filter((contact) => !contact.selected);\r\n      return {\r\n        ...state,\r\n        alertMessage: 'Contact Deleted Successfully',\r\n        showMessage: true,\r\n        allContact: contacts,\r\n        contactList: contacts,\r\n        selectedContacts: 0\r\n      }\r\n    }\r\n    case FILTER_CONTACT: {\r\n      const {filterOption} = state;\r\n      let contactList = [];\r\n      if (action.payload === '') {\r\n        contactList = state.allContact;\r\n      } else {\r\n        const filterContact = state.allContact.filter((contact) =>\r\n          contact.name.toLowerCase().indexOf(action.payload.toLowerCase()) > -1);\r\n        if (filterOption === 'All contacts') {\r\n          contactList = filterContact\r\n        } else if (filterOption === 'Frequently contacted') {\r\n          contactList = filterContact.filter((contact) => contact.frequently);\r\n        } else if (filterOption === 'Starred contacts') {\r\n          contactList = filterContact.filter((contact) => contact.starred);\r\n        }\r\n      }\r\n      return {...state, contactList: contactList}\r\n    }\r\n    case GET_ALL_CONTACT: {\r\n      let contactList = state.allContact.map((contact) => contact ? {\r\n        ...contact,\r\n        selected: true\r\n      } : contact);\r\n      return {\r\n        ...state,\r\n        selectedContacts: contactList.length,\r\n        allContact: contactList,\r\n        contactList: contactList\r\n      }\r\n    }\r\n    case GET_UNSELECTED_ALL_CONTACT: {\r\n      let contactList = state.allContact.map((contact) => contact ? {\r\n        ...contact,\r\n        selected: false\r\n      } : contact);\r\n      return {\r\n        ...state,\r\n        selectedContacts: 0,\r\n        allContact: contactList,\r\n        contactList: contactList\r\n      }\r\n    }\r\n    case ON_ALL_CONTACT_SELECT: {\r\n      const selectAll = state.selectedContacts < state.contactList.length;\r\n      let selectedContacts = 0;\r\n      let contactList = [];\r\n      if (selectAll) {\r\n        contactList = state.allContact.map((contact) => contact ? {\r\n          ...contact,\r\n          selected: true\r\n        } : contact);\r\n        selectedContacts = contactList.length;\r\n      } else {\r\n        contactList = state.allContact.map((contact) => contact ? {\r\n          ...contact,\r\n          selected: true\r\n        } : contact);\r\n        selectedContacts = 0;\r\n      }\r\n      return {\r\n        ...state,\r\n        selectedContacts: selectedContacts,\r\n        allContact: contactList,\r\n        contactList: contactList\r\n      }\r\n    }\r\n    case UPDATE_SEARCH_USER: {\r\n      return {...state, searchUser: action.payload}\r\n    }\r\n    case HANDLE_REQUEST_CLOSE: {\r\n      return {...state, showMessage: false}\r\n    }\r\n    case ON_TOGGLE_DRAWER: {\r\n      return {...state, drawerState: !state.drawerState}\r\n    }\r\n    case HIDE_CONTACT_LOADER: {\r\n      return {...state, loader: false}\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}