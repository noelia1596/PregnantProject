{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\src\\\\app\\\\routes\\\\antojos\\\\index.js\";\n\n/*\r\nimport React from 'react';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport StepContent from '@material-ui/core/StepContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DatePickers from '../components/routes/date/DatePickers';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nfunction getSteps() {\r\n  return ['NameofCravings', 'TypeofCraving', 'DateofCraving', 'TimesofCraving', 'WhoGavetheWhim' ];\r\n}\r\n\r\nfunction getStepContent(step) {\r\n  switch (step) {\r\n    case 0:\r\n      return this.NameofCravings();\r\n    case 1:\r\n      return this.TypeofCraving();\r\n    case 2:\r\n      return this.DateofCraving();\r\n    case 3:\r\n      return this.TimesofCraving();\r\n    case 4:\r\n      return this.WhoGavetheWhim();\r\n    default:\r\n      return 'Unknown step';\r\n  }\r\n}\r\n\r\nclass VerticalLinearStepper extends React.Component {\r\n  state = {\r\n    activeStep: 0,\r\n  };\r\n\r\n  handleChange (e) {\r\n    const n = e.target.name; //en n me guardas el contenido que tiene name\r\n    const valor = e.target.value;\r\n    this.setState({\r\n      [n]: valor //en n me pones el valor\r\n    })\r\n  };\r\n  NameofCravings() {\r\n    return \r\n    /*\r\n        <div className=\"form-group\">\r\n            <TextField\r\n                onChange={this.handleChange}\r\n                name='NameofCravings'\r\n                id=\"NameofCravings\"\r\n                label=\"Name of Cravings\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n            />\r\n        </div>  \r\n\r\n        \r\n\r\n        return <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='NombrePadre'\r\n              id=\"NameDad\"\r\n              label=\"Name\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='ApellidosPadre'\r\n              id=\"SurnameDad\"\r\n              label=\"Surname\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <span>Fecha Nacimiento</span>\r\n              <DatePickers\r\n                onBlur={this.handleChange}\r\n                name=\"FechaNacimientoPadre\"\r\n              />\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  TypeofCraving() {\r\n    return \r\n    return <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='NombrePadre'\r\n              id=\"NameDad\"\r\n              label=\"Name\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='ApellidosPadre'\r\n              id=\"SurnameDad\"\r\n              label=\"Surname\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <span>Fecha Nacimiento</span>\r\n              <DatePickers\r\n                onBlur={this.handleChange}\r\n                name=\"FechaNacimientoPadre\"\r\n              />\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    /*\r\n        <div className=\"form-group\">\r\n            <TextField\r\n                onChange={this.handleChange}\r\n                name='TypeofCraving'\r\n                id=\"TypeofCraving\"\r\n                label=\"Type of Cravings\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n            />\r\n        </div>  \r\n        \r\n  }\r\n\r\n  DateofCraving() {\r\n    return \r\n    return <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='NombrePadre'\r\n              id=\"NameDad\"\r\n              label=\"Name\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='ApellidosPadre'\r\n              id=\"SurnameDad\"\r\n              label=\"Surname\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <span>Fecha Nacimiento</span>\r\n              <DatePickers\r\n                onBlur={this.handleChange}\r\n                name=\"FechaNacimientoPadre\"\r\n              />\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    /*\r\n        <div className=\"form-group\">\r\n          <span>Fecha </span>\r\n              <DatePickers\r\n                  onBlur={this.handleChange}\r\n                  name='DateofCraving'\r\n              />\r\n        </div>  \r\n\r\n        \r\n  }\r\n\r\n  TypeofCraving() {\r\n    return \r\n    /*\r\n        <div className=\"form-group\">\r\n            <TextField\r\n                onChange={this.handleChange}\r\n                name='TypeofCraving'\r\n                id=\"TypeofCraving\"\r\n                label=\"Type of Cravings\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n            />\r\n        </div>  \r\n\r\n        \r\n        return <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='NombrePadre'\r\n              id=\"NameDad\"\r\n              label=\"Name\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='ApellidosPadre'\r\n              id=\"SurnameDad\"\r\n              label=\"Surname\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <span>Fecha Nacimiento</span>\r\n              <DatePickers\r\n                onBlur={this.handleChange}\r\n                name=\"FechaNacimientoPadre\"\r\n              />\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n\r\n  handleNext = () => {\r\n    this.setState({\r\n      activeStep: this.state.activeStep + 1,\r\n    });\r\n  };\r\n\r\n  handleBack = () => {\r\n    this.setState({\r\n      activeStep: this.state.activeStep - 1,\r\n    });\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      activeStep: 0,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const steps = getSteps();\r\n    const {activeStep} = this.state;\r\n\r\n    return (\r\n      <div className=\"w-100\">\r\n        <Stepper activeStep={activeStep} orientation=\"vertical\">\r\n          {steps.map((label, index) => {\r\n            return (\r\n              <Step key={label}>\r\n                <StepLabel>{label}</StepLabel>\r\n                <StepContent className=\"pb-3\">\r\n                  <Typography>{getStepContent(index)}</Typography>\r\n                </StepContent>\r\n              </Step>\r\n            );\r\n          })}\r\n        </Stepper>\r\n        <div>\r\n          {this.state.activeStep === steps.length ? (\r\n            <div>\r\n              <Typography className=\"my-2\">\r\n                All steps completed - you&quot;re finished\r\n              </Typography>\r\n              <Button onClick={this.handleReset}>Reset</Button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              {this.getStepContent(activeStep)}\r\n              <div>\r\n                <Button\r\n                  disabled={activeStep === 0}\r\n                  onClick={this.handleBack}\r\n                  className=\"mr-2\"\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleNext}>\r\n                  {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VerticalLinearStepper;\r\n\r\n\r\n*/\nimport React from \"react\";\nimport { MDBContainer, MDBRow, MDBCol, MDBStepper, MDBStep, MDBBtn, MDBCard, MDBCardBody, MDBInput } from \"mdbreact\";\n\nvar StepperExample =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StepperExample, _React$Component);\n\n  function StepperExample() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StepperExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StepperExample)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      formActivePanel3: 1,\n      formActivePanel1Changed: false\n    };\n\n    _this.swapFormActive = function (a) {\n      return function (param) {\n        return function (e) {\n          var _this$setState;\n\n          _this.setState((_this$setState = {}, _defineProperty(_this$setState, 'formActivePanel' + a, param), _defineProperty(_this$setState, 'formActivePanel' + a + 'Changed', true), _this$setState));\n        };\n      };\n    };\n\n    _this.handleNextPrevClick = function (a) {\n      return function (param) {\n        return function (e) {\n          var _this$setState2;\n\n          _this.setState((_this$setState2 = {}, _defineProperty(_this$setState2, 'formActivePanel' + a, param), _defineProperty(_this$setState2, 'formActivePanel' + a + 'Changed', true), _this$setState2));\n        };\n      };\n    };\n\n    _this.handleSubmission = function () {\n      alert('Form submitted!');\n    };\n\n    _this.calculateAutofocus = function (a) {\n      if (_this.state['formActivePanel' + a + 'Changed']) {\n        return true;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(StepperExample, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(MDBContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, React.createElement(MDBCard, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, React.createElement(MDBCardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      }, React.createElement(MDBRow, {\n        className: \"pt-5 justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }, React.createElement(MDBCol, {\n        md: \"2\",\n        className: \"pl-5 pl-md-0 pb-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }, React.createElement(MDBStepper, {\n        icon: true,\n        vertical: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383\n        },\n        __self: this\n      })), React.createElement(MDBCol, {\n        md: \"7\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, this.state.formActivePanel3 === 1 && React.createElement(MDBCol, {\n        md: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"font-weight-bold pl-0 my-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      }, \"Basic Information\")), React.createElement(MDBInput, {\n        label: \"Email\",\n        className: \"mt-4\",\n        autoFocus: this.calculateAutofocus(3),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }), React.createElement(MDBInput, {\n        label: \"Username\",\n        className: \"mt-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402\n        },\n        __self: this\n      }), React.createElement(MDBInput, {\n        label: \"Password\",\n        className: \"mt-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }), React.createElement(MDBInput, {\n        label: \"Repeat Password\",\n        className: \"mt-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      }), React.createElement(MDBBtn, {\n        color: \"mdb-color\",\n        rounded: true,\n        className: \"float-right\",\n        onClick: this.handleNextPrevClick(3)(2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        },\n        __self: this\n      }, \"next\")), this.state.formActivePanel3 === 2 && React.createElement(MDBCol, {\n        md: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"font-weight-bold pl-0 my-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413\n        },\n        __self: this\n      }, \"Personal Data\")), React.createElement(MDBInput, {\n        label: \"First Name\",\n        className: \"mt-3\",\n        autoFocus: this.calculateAutofocus(3),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }), React.createElement(MDBInput, {\n        label: \"Second Name\",\n        className: \"mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }), React.createElement(MDBInput, {\n        label: \"Surname\",\n        className: \"mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      }), React.createElement(MDBInput, {\n        label: \"Address\",\n        type: \"textarea\",\n        rows: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }), React.createElement(MDBBtn, {\n        color: \"mdb-color\",\n        rounded: true,\n        className: \"float-left\",\n        onClick: this.handleNextPrevClick(3)(1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419\n        },\n        __self: this\n      }, \"previous\"), React.createElement(MDBBtn, {\n        color: \"mdb-color\",\n        rounded: true,\n        className: \"float-right\",\n        onClick: this.handleNextPrevClick(3)(3),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422\n        },\n        __self: this\n      }, \"next\")), this.state.formActivePanel3 === 3 && React.createElement(MDBCol, {\n        md: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"font-weight-bold pl-0 my-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, \"Terms and conditions\")), React.createElement(MDBInput, {\n        label: \"I agreee to the terms and conditions\",\n        type: \"checkbox\",\n        id: \"checkbox3\",\n        autoFocus: this.calculateAutofocus(3),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        },\n        __self: this\n      }), React.createElement(MDBInput, {\n        label: \"I want to receive newsletter\",\n        type: \"checkbox\",\n        id: \"checkbox4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433\n        },\n        __self: this\n      }), React.createElement(MDBBtn, {\n        color: \"mdb-color\",\n        rounded: true,\n        className: \"float-left\",\n        onClick: this.handleNextPrevClick(3)(2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434\n        },\n        __self: this\n      }, \"previous\"), React.createElement(MDBBtn, {\n        color: \"mdb-color\",\n        rounded: true,\n        className: \"float-right\",\n        onClick: this.handleNextPrevClick(3)(4),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437\n        },\n        __self: this\n      }, \"next\")), this.state.formActivePanel3 === 4 && React.createElement(MDBCol, {\n        md: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"font-weight-bold pl-0 my-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445\n        },\n        __self: this\n      }, \"Finish\")), React.createElement(\"h2\", {\n        className: \"text-center font-weight-bold my-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447\n        },\n        __self: this\n      }, \"Registration completed!\"), React.createElement(MDBBtn, {\n        color: \"mdb-color\",\n        rounded: true,\n        className: \"float-left\",\n        onClick: this.handleNextPrevClick(3)(3),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450\n        },\n        __self: this\n      }, \"previous\"), React.createElement(MDBBtn, {\n        color: \"success\",\n        rounded: true,\n        className: \"float-right\",\n        onClick: this.handleSubmission,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453\n        },\n        __self: this\n      }, \"submit\")))))));\n    }\n  }]);\n\n  return StepperExample;\n}(React.Component);\n\nexport default StepperExample;","map":{"version":3,"sources":["C:\\Users\\Noelia\\Desktop\\Plantillas\\source\\src\\app\\routes\\antojos\\index.js"],"names":["React","MDBContainer","MDBRow","MDBCol","MDBStepper","MDBStep","MDBBtn","MDBCard","MDBCardBody","MDBInput","StepperExample","state","formActivePanel3","formActivePanel1Changed","swapFormActive","a","param","e","setState","handleNextPrevClick","handleSubmission","alert","calculateAutofocus","Component"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoVA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,MAAvB,EAA+BC,MAA/B,EAAuCC,UAAvC,EAAmDC,OAAnD,EAA4DC,MAA5D,EAAoEC,OAApE,EAA6EC,WAA7E,EAA0FC,QAA1F,QAA0G,UAA1G;;IAGMC,c;;;;;;;;;;;;;;;;;UAENC,K,GAAQ;AACNC,MAAAA,gBAAgB,EAAE,CADZ;AAENC,MAAAA,uBAAuB,EAAE;AAFnB,K;;UAKRC,c,GAAiB,UAACC,CAAD;AAAA,aAAO,UAACC,KAAD;AAAA,eAAW,UAACC,CAAD,EAAO;AAAA;;AACxC,gBAAKC,QAAL,uDACG,oBAAoBH,CADvB,EAC2BC,KAD3B,mCAEG,oBAAoBD,CAApB,GAAwB,SAF3B,EAEuC,IAFvC;AAID,SALuB;AAAA,OAAP;AAAA,K;;UAOjBI,mB,GAAsB,UAACJ,CAAD;AAAA,aAAO,UAACC,KAAD;AAAA,eAAW,UAACC,CAAD,EAAO;AAAA;;AAC7C,gBAAKC,QAAL,yDACG,oBAAoBH,CADvB,EAC2BC,KAD3B,oCAEG,oBAAoBD,CAApB,GAAwB,SAF3B,EAEuC,IAFvC;AAID,SAL4B;AAAA,OAAP;AAAA,K;;UAOtBK,gB,GAAmB,YAAM;AACvBC,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACD,K;;UAEDC,kB,GAAqB,UAACP,CAAD,EAAO;AAC1B,UAAI,MAAKJ,KAAL,CAAW,oBAAoBI,CAApB,GAAwB,SAAnC,CAAJ,EAAmD;AACnD,eAAO,IAAP;AACC;AACF,K;;;;;;;6BAEQ;AACP,aACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,6BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,GAAX;AAAe,QAAA,SAAS,EAAC,mBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAY,QAAA,IAAI,MAAhB;AAAiB,QAAA,QAAQ,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAcE,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKJ,KAAL,CAAWC,gBAAX,KAAgC,CAAhC,IACD,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,4BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CADF,EAIE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,OAAhB;AAAwB,QAAA,SAAS,EAAC,MAAlC;AAAyC,QAAA,SAAS,EAAE,KAAKU,kBAAL,CAAwB,CAAxB,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,UAAhB;AAA2B,QAAA,SAAS,EAAC,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EAME,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,UAAhB;AAA2B,QAAA,SAAS,EAAC,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,EAOE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,iBAAhB;AAAkC,QAAA,SAAS,EAAC,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,EAQE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,WAAd;AAA0B,QAAA,OAAO,MAAjC;AAAkC,QAAA,SAAS,EAAC,aAA5C;AAA0D,QAAA,OAAO,EAAE,KAAKH,mBAAL,CAAyB,CAAzB,EAA4B,CAA5B,CAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF,CAFF,EAeG,KAAKR,KAAL,CAAWC,gBAAX,KAAgC,CAAhC,IACD,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,4BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,CADF,EAIE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,YAAhB;AAA6B,QAAA,SAAS,EAAC,MAAvC;AAA8C,QAAA,SAAS,EAAE,KAAKU,kBAAL,CAAwB,CAAxB,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,aAAhB;AAA8B,QAAA,SAAS,EAAC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EAME,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,SAAhB;AAA0B,QAAA,SAAS,EAAC,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,EAOE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,SAAhB;AAA0B,QAAA,IAAI,EAAC,UAA/B;AAA0C,QAAA,IAAI,EAAC,GAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,EAQE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,WAAd;AAA0B,QAAA,OAAO,MAAjC;AAAkC,QAAA,SAAS,EAAC,YAA5C;AAAyD,QAAA,OAAO,EAAE,KAAKH,mBAAL,CAAyB,CAAzB,EAA4B,CAA5B,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARF,EAWE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,WAAd;AAA0B,QAAA,OAAO,MAAjC;AAAkC,QAAA,SAAS,EAAC,aAA5C;AAA0D,QAAA,OAAO,EAAE,KAAKA,mBAAL,CAAyB,CAAzB,EAA4B,CAA5B,CAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF,CAhBF,EAgCG,KAAKR,KAAL,CAAWC,gBAAX,KAAgC,CAAhC,IACD,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,4BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,CADF,EAIE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,sCAAhB;AAAuD,QAAA,IAAI,EAAC,UAA5D;AAAuE,QAAA,EAAE,EAAC,WAA1E;AAAsF,QAAA,SAAS,EAAE,KAAKU,kBAAL,CAAwB,CAAxB,CAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,8BAAhB;AAA+C,QAAA,IAAI,EAAC,UAApD;AAA+D,QAAA,EAAE,EAAC,WAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EAME,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,WAAd;AAA0B,QAAA,OAAO,MAAjC;AAAkC,QAAA,SAAS,EAAC,YAA5C;AAAyD,QAAA,OAAO,EAAE,KAAKH,mBAAL,CAAyB,CAAzB,EAA4B,CAA5B,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,EASE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,WAAd;AAA0B,QAAA,OAAO,MAAjC;AAAkC,QAAA,SAAS,EAAC,aAA5C;AAA0D,QAAA,OAAO,EAAE,KAAKA,mBAAL,CAAyB,CAAzB,EAA4B,CAA5B,CAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF,CAjCF,EA+CG,KAAKR,KAAL,CAAWC,gBAAX,KAAgC,CAAhC,IACD,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,4BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CADF,EAIE;AAAI,QAAA,SAAS,EAAC,mCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAJF,EAOE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,WAAd;AAA0B,QAAA,OAAO,MAAjC;AAAkC,QAAA,SAAS,EAAC,YAA5C;AAAyD,QAAA,OAAO,EAAE,KAAKO,mBAAL,CAAyB,CAAzB,EAA4B,CAA5B,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,EAUE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,SAAd;AAAwB,QAAA,OAAO,MAA/B;AAAgC,QAAA,SAAS,EAAC,aAA1C;AAAwD,QAAA,OAAO,EAAE,KAAKC,gBAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVF,CAhDF,CAdF,CADF,CADF,CADF,CADF;AAuFC;;;;EAvH0BpB,KAAK,CAACuB,S;;AA0HnC,eAAeb,cAAf","sourcesContent":["/*\r\nimport React from 'react';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport StepContent from '@material-ui/core/StepContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DatePickers from '../components/routes/date/DatePickers';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nfunction getSteps() {\r\n  return ['NameofCravings', 'TypeofCraving', 'DateofCraving', 'TimesofCraving', 'WhoGavetheWhim' ];\r\n}\r\n\r\nfunction getStepContent(step) {\r\n  switch (step) {\r\n    case 0:\r\n      return this.NameofCravings();\r\n    case 1:\r\n      return this.TypeofCraving();\r\n    case 2:\r\n      return this.DateofCraving();\r\n    case 3:\r\n      return this.TimesofCraving();\r\n    case 4:\r\n      return this.WhoGavetheWhim();\r\n    default:\r\n      return 'Unknown step';\r\n  }\r\n}\r\n\r\nclass VerticalLinearStepper extends React.Component {\r\n  state = {\r\n    activeStep: 0,\r\n  };\r\n\r\n  handleChange (e) {\r\n    const n = e.target.name; //en n me guardas el contenido que tiene name\r\n    const valor = e.target.value;\r\n    this.setState({\r\n      [n]: valor //en n me pones el valor\r\n    })\r\n  };\r\n  NameofCravings() {\r\n    return \r\n    /*\r\n        <div className=\"form-group\">\r\n            <TextField\r\n                onChange={this.handleChange}\r\n                name='NameofCravings'\r\n                id=\"NameofCravings\"\r\n                label=\"Name of Cravings\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n            />\r\n        </div>  \r\n\r\n        \r\n\r\n        return <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='NombrePadre'\r\n              id=\"NameDad\"\r\n              label=\"Name\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='ApellidosPadre'\r\n              id=\"SurnameDad\"\r\n              label=\"Surname\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <span>Fecha Nacimiento</span>\r\n              <DatePickers\r\n                onBlur={this.handleChange}\r\n                name=\"FechaNacimientoPadre\"\r\n              />\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  TypeofCraving() {\r\n    return \r\n    return <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='NombrePadre'\r\n              id=\"NameDad\"\r\n              label=\"Name\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='ApellidosPadre'\r\n              id=\"SurnameDad\"\r\n              label=\"Surname\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <span>Fecha Nacimiento</span>\r\n              <DatePickers\r\n                onBlur={this.handleChange}\r\n                name=\"FechaNacimientoPadre\"\r\n              />\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    /*\r\n        <div className=\"form-group\">\r\n            <TextField\r\n                onChange={this.handleChange}\r\n                name='TypeofCraving'\r\n                id=\"TypeofCraving\"\r\n                label=\"Type of Cravings\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n            />\r\n        </div>  \r\n        \r\n  }\r\n\r\n  DateofCraving() {\r\n    return \r\n    return <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='NombrePadre'\r\n              id=\"NameDad\"\r\n              label=\"Name\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='ApellidosPadre'\r\n              id=\"SurnameDad\"\r\n              label=\"Surname\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <span>Fecha Nacimiento</span>\r\n              <DatePickers\r\n                onBlur={this.handleChange}\r\n                name=\"FechaNacimientoPadre\"\r\n              />\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    /*\r\n        <div className=\"form-group\">\r\n          <span>Fecha </span>\r\n              <DatePickers\r\n                  onBlur={this.handleChange}\r\n                  name='DateofCraving'\r\n              />\r\n        </div>  \r\n\r\n        \r\n  }\r\n\r\n  TypeofCraving() {\r\n    return \r\n    /*\r\n        <div className=\"form-group\">\r\n            <TextField\r\n                onChange={this.handleChange}\r\n                name='TypeofCraving'\r\n                id=\"TypeofCraving\"\r\n                label=\"Type of Cravings\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n            />\r\n        </div>  \r\n\r\n        \r\n        return <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='NombrePadre'\r\n              id=\"NameDad\"\r\n              label=\"Name\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='ApellidosPadre'\r\n              id=\"SurnameDad\"\r\n              label=\"Surname\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <span>Fecha Nacimiento</span>\r\n              <DatePickers\r\n                onBlur={this.handleChange}\r\n                name=\"FechaNacimientoPadre\"\r\n              />\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n\r\n  handleNext = () => {\r\n    this.setState({\r\n      activeStep: this.state.activeStep + 1,\r\n    });\r\n  };\r\n\r\n  handleBack = () => {\r\n    this.setState({\r\n      activeStep: this.state.activeStep - 1,\r\n    });\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      activeStep: 0,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const steps = getSteps();\r\n    const {activeStep} = this.state;\r\n\r\n    return (\r\n      <div className=\"w-100\">\r\n        <Stepper activeStep={activeStep} orientation=\"vertical\">\r\n          {steps.map((label, index) => {\r\n            return (\r\n              <Step key={label}>\r\n                <StepLabel>{label}</StepLabel>\r\n                <StepContent className=\"pb-3\">\r\n                  <Typography>{getStepContent(index)}</Typography>\r\n                </StepContent>\r\n              </Step>\r\n            );\r\n          })}\r\n        </Stepper>\r\n        <div>\r\n          {this.state.activeStep === steps.length ? (\r\n            <div>\r\n              <Typography className=\"my-2\">\r\n                All steps completed - you&quot;re finished\r\n              </Typography>\r\n              <Button onClick={this.handleReset}>Reset</Button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              {this.getStepContent(activeStep)}\r\n              <div>\r\n                <Button\r\n                  disabled={activeStep === 0}\r\n                  onClick={this.handleBack}\r\n                  className=\"mr-2\"\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleNext}>\r\n                  {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VerticalLinearStepper;\r\n\r\n\r\n*/\r\n\r\n\r\nimport React from \"react\";\r\nimport { MDBContainer, MDBRow, MDBCol, MDBStepper, MDBStep, MDBBtn, MDBCard, MDBCardBody, MDBInput } from \"mdbreact\";\r\n\r\n\r\nclass StepperExample extends React.Component {\r\n\r\nstate = {\r\n  formActivePanel3: 1,\r\n  formActivePanel1Changed: false,\r\n}\r\n\r\nswapFormActive = (a) => (param) => (e) => {\r\n  this.setState({\r\n    ['formActivePanel' + a]: param,\r\n    ['formActivePanel' + a + 'Changed']: true\r\n  });\r\n}\r\n\r\nhandleNextPrevClick = (a) => (param) => (e) => {\r\n  this.setState({\r\n    ['formActivePanel' + a]: param,\r\n    ['formActivePanel' + a + 'Changed']: true\r\n  });\r\n}\r\n\r\nhandleSubmission = () => {\r\n  alert('Form submitted!');\r\n}\r\n\r\ncalculateAutofocus = (a) => {\r\n  if (this.state['formActivePanel' + a + 'Changed']) {\r\n  return true\r\n  }\r\n}\r\n\r\nrender() {\r\n  return (\r\n    <MDBContainer>\r\n      <MDBCard>\r\n        <MDBCardBody>\r\n          <MDBRow className=\"pt-5 justify-content-center\">\r\n            <MDBCol md=\"2\" className=\"pl-5 pl-md-0 pb-5\">\r\n              <MDBStepper icon vertical>\r\n              {/* \r\n                <MDBStep far icon=\"folder-open\" stepName=\"Basic Information\" onClick={this.swapFormActive(3)(1)} vertical />\r\n                <MDBStep icon=\"pencil-alt\" stepName=\"Personal Data\" onClick={this.swapFormActive(3)(2)} vertical />\r\n                <MDBStep far icon=\"image\" stepName=\"Terms and Conditions\" onClick={this.swapFormActive(3)(3)} vertical />\r\n                <MDBStep icon=\"check\" stepName=\"Finish\" onClick={this.swapFormActive(3)(4)} vertical />\r\n              */}\r\n                </MDBStepper>\r\n\r\n              \r\n            </MDBCol>\r\n\r\n            <MDBCol md=\"7\">\r\n              {this.state.formActivePanel3 === 1 && (\r\n              <MDBCol md=\"12\">\r\n                <h3 className=\"font-weight-bold pl-0 my-4\">\r\n                  <strong>Basic Information</strong>\r\n                </h3>\r\n                <MDBInput label=\"Email\" className=\"mt-4\" autoFocus={this.calculateAutofocus(3)} />\r\n                <MDBInput label=\"Username\" className=\"mt-4\" />\r\n                <MDBInput label=\"Password\" className=\"mt-4\" />\r\n                <MDBInput label=\"Repeat Password\" className=\"mt-4\" />\r\n                <MDBBtn color=\"mdb-color\" rounded className=\"float-right\" onClick={this.handleNextPrevClick(3)(2)}>\r\n                  next\r\n                </MDBBtn>\r\n              </MDBCol>\r\n              )}\r\n              {this.state.formActivePanel3 === 2 && (\r\n              <MDBCol md=\"12\">\r\n                <h3 className=\"font-weight-bold pl-0 my-4\">\r\n                  <strong>Personal Data</strong>\r\n                </h3>\r\n                <MDBInput label=\"First Name\" className=\"mt-3\" autoFocus={this.calculateAutofocus(3)} />\r\n                <MDBInput label=\"Second Name\" className=\"mt-3\" />\r\n                <MDBInput label=\"Surname\" className=\"mt-3\" />\r\n                <MDBInput label=\"Address\" type=\"textarea\" rows=\"2\" />\r\n                <MDBBtn color=\"mdb-color\" rounded className=\"float-left\" onClick={this.handleNextPrevClick(3)(1)}>\r\n                  previous\r\n                </MDBBtn>\r\n                <MDBBtn color=\"mdb-color\" rounded className=\"float-right\" onClick={this.handleNextPrevClick(3)(3)}>\r\n                  next\r\n                </MDBBtn>\r\n              </MDBCol>\r\n              )}\r\n              {this.state.formActivePanel3 === 3 && (\r\n              <MDBCol md=\"12\">\r\n                <h3 className=\"font-weight-bold pl-0 my-4\">\r\n                  <strong>Terms and conditions</strong>\r\n                </h3>\r\n                <MDBInput label=\"I agreee to the terms and conditions\" type=\"checkbox\" id=\"checkbox3\" autoFocus={this.calculateAutofocus(3)} />\r\n                <MDBInput label=\"I want to receive newsletter\" type=\"checkbox\" id=\"checkbox4\" />\r\n                <MDBBtn color=\"mdb-color\" rounded className=\"float-left\" onClick={this.handleNextPrevClick(3)(2)}>\r\n                  previous\r\n                </MDBBtn>\r\n                <MDBBtn color=\"mdb-color\" rounded className=\"float-right\" onClick={this.handleNextPrevClick(3)(4)}>\r\n                  next\r\n                </MDBBtn>\r\n              </MDBCol>\r\n              )}\r\n              {this.state.formActivePanel3 === 4 && (\r\n              <MDBCol md=\"12\">\r\n                <h3 className=\"font-weight-bold pl-0 my-4\">\r\n                  <strong>Finish</strong>\r\n                </h3>\r\n                <h2 className=\"text-center font-weight-bold my-4\">\r\n                  Registration completed!\r\n                </h2>\r\n                <MDBBtn color=\"mdb-color\" rounded className=\"float-left\" onClick={this.handleNextPrevClick(3)(3)}>\r\n                  previous\r\n                </MDBBtn>\r\n                <MDBBtn color=\"success\" rounded className=\"float-right\" onClick={this.handleSubmission}>\r\n                  submit\r\n                </MDBBtn>\r\n              </MDBCol>\r\n              )}\r\n            </MDBCol>\r\n          </MDBRow>\r\n        </MDBCardBody>\r\n      </MDBCard>\r\n    </MDBContainer>\r\n    );\r\n  };\r\n}\r\n\r\nexport default StepperExample;"]},"metadata":{},"sourceType":"module"}