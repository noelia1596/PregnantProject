{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\src\\\\app\\\\routes\\\\components\\\\routes\\\\progressbar\\\\linear\\\\buffer\\\\LinearBuffer.js\";\nimport React, { Component } from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nvar LinearBuffer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LinearBuffer, _Component);\n\n  function LinearBuffer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LinearBuffer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LinearBuffer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      completed: 0,\n      buffer: 10\n    };\n\n    _this.progress = function () {\n      var completed = _this.state.completed;\n\n      if (completed > 100) {\n        _this.setState({\n          completed: 0,\n          buffer: 10\n        });\n      } else {\n        var diff = Math.random() * 10;\n        var diff2 = Math.random() * 10;\n\n        _this.setState({\n          completed: completed + diff,\n          buffer: completed + diff + diff2\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(LinearBuffer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.timer = setInterval(this.progress, 500);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timer);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          completed = _this$state.completed,\n          buffer = _this$state.buffer;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(LinearProgress, {\n        mode: \"buffer\",\n        value: completed,\n        valueBuffer: buffer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }), React.createElement(LinearProgress, {\n        color: \"secondary\",\n        mode: \"buffer\",\n        value: completed,\n        valueBuffer: buffer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return LinearBuffer;\n}(Component);\n\nexport default LinearBuffer;","map":{"version":3,"sources":["C:\\Users\\Noelia\\Desktop\\Plantillas\\source\\src\\app\\routes\\components\\routes\\progressbar\\linear\\buffer\\LinearBuffer.js"],"names":["React","Component","LinearProgress","LinearBuffer","state","completed","buffer","progress","setState","diff","Math","random","diff2","timer","setInterval","clearInterval"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;;IAEMC,Y;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,SAAS,EAAE,CADL;AAENC,MAAAA,MAAM,EAAE;AAFF,K;;UAIRC,Q,GAAW,YAAM;AAAA,UACRF,SADQ,GACK,MAAKD,KADV,CACRC,SADQ;;AAEf,UAAIA,SAAS,GAAG,GAAhB,EAAqB;AACnB,cAAKG,QAAL,CAAc;AAACH,UAAAA,SAAS,EAAE,CAAZ;AAAeC,UAAAA,MAAM,EAAE;AAAvB,SAAd;AACD,OAFD,MAEO;AACL,YAAMG,IAAI,GAAGC,IAAI,CAACC,MAAL,KAAgB,EAA7B;AACA,YAAMC,KAAK,GAAGF,IAAI,CAACC,MAAL,KAAgB,EAA9B;;AACA,cAAKH,QAAL,CAAc;AAACH,UAAAA,SAAS,EAAEA,SAAS,GAAGI,IAAxB;AAA8BH,UAAAA,MAAM,EAAED,SAAS,GAAGI,IAAZ,GAAmBG;AAAzD,SAAd;AACD;AACF,K;;;;;;;wCAEmB;AAClB,WAAKC,KAAL,GAAaC,WAAW,CAAC,KAAKP,QAAN,EAAgB,GAAhB,CAAxB;AACD;;;2CAEsB;AACrBQ,MAAAA,aAAa,CAAC,KAAKF,KAAN,CAAb;AACD;;;6BAEQ;AAAA,wBACqB,KAAKT,KAD1B;AAAA,UACAC,SADA,eACAA,SADA;AAAA,UACWC,MADX,eACWA,MADX;AAEP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,cAAD;AAAgB,QAAA,IAAI,EAAC,QAArB;AAA8B,QAAA,KAAK,EAAED,SAArC;AAAgD,QAAA,WAAW,EAAEC,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE,oBAAC,cAAD;AAAgB,QAAA,KAAK,EAAC,WAAtB;AAAkC,QAAA,IAAI,EAAC,QAAvC;AAAgD,QAAA,KAAK,EAAED,SAAvD;AAAkE,QAAA,WAAW,EAAEC,MAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADF;AAOD;;;;EAlCwBL,S;;AAqC3B,eAAeE,YAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nclass LinearBuffer extends Component {\r\n  timer;\r\n  state = {\r\n    completed: 0,\r\n    buffer: 10,\r\n  };\r\n  progress = () => {\r\n    const {completed} = this.state;\r\n    if (completed > 100) {\r\n      this.setState({completed: 0, buffer: 10});\r\n    } else {\r\n      const diff = Math.random() * 10;\r\n      const diff2 = Math.random() * 10;\r\n      this.setState({completed: completed + diff, buffer: completed + diff + diff2});\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(this.progress, 500);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  render() {\r\n    const {completed, buffer} = this.state;\r\n    return (\r\n      <div>\r\n        <LinearProgress mode=\"buffer\" value={completed} valueBuffer={buffer}/>\r\n        <br/>\r\n        <LinearProgress color=\"secondary\" mode=\"buffer\" value={completed} valueBuffer={buffer}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LinearBuffer;"]},"metadata":{},"sourceType":"module"}