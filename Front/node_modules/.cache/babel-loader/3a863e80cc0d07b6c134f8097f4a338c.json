{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchContactRequest),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { fetchContactsSuccess, showContactMessage } from 'actions/Contact';\nimport { database } from '../firebase/firebase';\nimport { FETCH_ALL_CONTACT } from 'constants/ActionTypes';\n\nvar getContacts =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return database.ref('prod/contacts').once('value').then(function (snapshot) {\n              var contacts = [];\n              snapshot.forEach(function (rawData) {\n                contacts.push(rawData.val());\n              });\n              return contacts;\n            }).catch(function (error) {\n              return error;\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getContacts() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction fetchContactRequest() {\n  var fetchedContact;\n  return _regeneratorRuntime.wrap(function fetchContactRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(getContacts);\n\n        case 3:\n          fetchedContact = _context2.sent;\n          _context2.next = 6;\n          return put(fetchContactsSuccess(fetchedContact));\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put(showContactMessage(_context2.t0));\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery(FETCH_ALL_CONTACT, fetchContactRequest)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Users\\Noelia\\Desktop\\Plantillas\\source\\src\\sagas\\Contact.js"],"names":["fetchContactRequest","rootSaga","all","call","put","takeEvery","fetchContactsSuccess","showContactMessage","database","FETCH_ALL_CONTACT","getContacts","ref","once","then","snapshot","contacts","forEach","rawData","push","val","catch","error","fetchedContact"],"mappings":";;;;;yBAiBUA,mB;;;yBAUeC,Q;;AA3BzB,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,SAAxB,QAAwC,oBAAxC;AACA,SAAQC,oBAAR,EAA8BC,kBAA9B,QAAuD,iBAAvD;AACA,SAAQC,QAAR,QAAuB,sBAAvB;AACA,SAAQC,iBAAR,QAAgC,uBAAhC;;AAEA,IAAMC,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACZF,QAAQ,CAACG,GAAT,CAAa,eAAb,EAA8BC,IAA9B,CAAmC,OAAnC,EACHC,IADG,CACE,UAACC,QAAD,EAAc;AAClB,kBAAMC,QAAQ,GAAG,EAAjB;AACAD,cAAAA,QAAQ,CAACE,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC5BF,gBAAAA,QAAQ,CAACG,IAAT,CAAcD,OAAO,CAACE,GAAR,EAAd;AACD,eAFD;AAGA,qBAAOJ,QAAP;AACD,aAPG,EAQHK,KARG,CAQG,UAAAC,KAAK;AAAA,qBAAIA,KAAJ;AAAA,aARR,CADY;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXX,WAAW;AAAA;AAAA;AAAA,GAAjB;;AAYA,SAAUV,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE2B,iBAAMG,IAAI,CAACO,WAAD,CAAV;;AAF3B;AAEUY,UAAAA,cAFV;AAAA;AAGI,iBAAMlB,GAAG,CAACE,oBAAoB,CAACgB,cAAD,CAArB,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKI,iBAAMlB,GAAG,CAACG,kBAAkB,cAAnB,CAAT;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,eAAe,SAAUN,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACG,SAAS,CAACI,iBAAD,EAAoBT,mBAApB,CAAV,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, call, put, takeEvery} from 'redux-saga/effects';\r\nimport {fetchContactsSuccess, showContactMessage} from 'actions/Contact';\r\nimport {database} from '../firebase/firebase';\r\nimport {FETCH_ALL_CONTACT} from 'constants/ActionTypes';\r\n\r\nconst getContacts = async () =>\r\n  await database.ref('prod/contacts').once('value')\r\n    .then((snapshot) => {\r\n      const contacts = [];\r\n      snapshot.forEach((rawData) => {\r\n        contacts.push(rawData.val());\r\n      });\r\n      return contacts;\r\n    })\r\n    .catch(error => error);\r\n\r\n\r\nfunction* fetchContactRequest() {\r\n  try {\r\n    const fetchedContact = yield call(getContacts);\r\n    yield put(fetchContactsSuccess(fetchedContact));\r\n  } catch (error) {\r\n    yield put(showContactMessage(error));\r\n  }\r\n}\r\n\r\n\r\nexport default function* rootSaga() {\r\n  yield all([takeEvery(FETCH_ALL_CONTACT, fetchContactRequest)]);\r\n}"]},"metadata":{},"sourceType":"module"}