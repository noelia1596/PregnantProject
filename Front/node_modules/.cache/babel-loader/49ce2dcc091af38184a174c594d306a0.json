{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\src\\\\app\\\\routes\\\\map\\\\routes\\\\geoLocation\\\\Components\\\\GeoLocation.js\";\nimport React, { Component } from \"react\";\nimport { Circle, GoogleMap, InfoWindow, withGoogleMap } from \"react-google-maps\";\nimport canUseDOM from \"can-use-dom\";\nimport raf from \"raf\";\nvar geolocation = canUseDOM && navigator.geolocation ? navigator.geolocation : {\n  getCurrentPosition: function getCurrentPosition(success, failure) {\n    failure(\"Your browser doesn't support geolocation.\");\n  }\n};\nvar GeolocationExampleGoogleMap = withGoogleMap(function (props) {\n  return React.createElement(GoogleMap, {\n    defaultZoom: 10,\n    center: props.center,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, props.center && React.createElement(InfoWindow, {\n    position: props.center,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, props.content)), props.center && React.createElement(Circle, {\n    center: props.center,\n    radius: props.radius,\n    options: {\n      fillColor: 'red',\n      fillOpacity: 0.20,\n      strokeColor: 'red',\n      strokeOpacity: 1,\n      strokeWeight: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n});\n/*\r\n * https://developers.google.com/maps/documentation/javascript/examples/map-geolocation\r\n *\r\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"></script> to your HTML to provide google.maps reference\r\n */\n\nvar GeolocationExample =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GeolocationExample, _Component);\n\n  function GeolocationExample() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GeolocationExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GeolocationExample)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      center: null,\n      content: null,\n      radius: 6000\n    };\n    _this.isUnmounted = false;\n    return _this;\n  }\n\n  _createClass(GeolocationExample, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var tick = function tick() {\n        if (_this2.isUnmounted) {\n          return;\n        }\n\n        _this2.setState({\n          radius: Math.max(_this2.state.radius - 20, 0)\n        });\n\n        if (_this2.state.radius > 200) {\n          raf(tick);\n        }\n      };\n\n      geolocation.getCurrentPosition(function (position) {\n        if (_this2.isUnmounted) {\n          return;\n        }\n\n        _this2.setState({\n          center: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          },\n          content: \"Location found using HTML5.\"\n        });\n\n        raf(tick);\n      }, function (reason) {\n        if (_this2.isUnmounted) {\n          return;\n        }\n\n        _this2.setState({\n          center: {\n            lat: 60,\n            lng: 105\n          },\n          content: \"Error: The Geolocation service failed (\".concat(reason, \").\")\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isUnmounted = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(GeolocationExampleGoogleMap, {\n        containerElement: React.createElement(\"div\", {\n          className: \"embed-responsive embed-responsive-21by9\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          className: \"embed-responsive-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }),\n        center: this.state.center,\n        content: this.state.content,\n        radius: this.state.radius,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return GeolocationExample;\n}(Component);\n\nexport { GeolocationExample as default };","map":{"version":3,"sources":["C:\\Users\\Noelia\\Desktop\\Plantillas\\source\\src\\app\\routes\\map\\routes\\geoLocation\\Components\\GeoLocation.js"],"names":["React","Component","Circle","GoogleMap","InfoWindow","withGoogleMap","canUseDOM","raf","geolocation","navigator","getCurrentPosition","success","failure","GeolocationExampleGoogleMap","props","center","content","radius","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","GeolocationExample","state","isUnmounted","tick","setState","Math","max","position","lat","coords","latitude","lng","longitude","reason"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Circle, GoogleMap, InfoWindow, withGoogleMap} from \"react-google-maps\";\r\nimport canUseDOM from \"can-use-dom\";\r\nimport raf from \"raf\";\r\n\r\nconst geolocation = (\r\n  canUseDOM && navigator.geolocation ?\r\n    navigator.geolocation :\r\n    ({\r\n      getCurrentPosition(success, failure) {\r\n        failure(`Your browser doesn't support geolocation.`);\r\n      },\r\n    })\r\n);\r\n\r\nconst GeolocationExampleGoogleMap = withGoogleMap(props => (\r\n  <GoogleMap\r\n    defaultZoom={10}\r\n    center={props.center}\r\n  >\r\n    {props.center && (\r\n      <InfoWindow position={props.center}>\r\n        <div>{props.content}</div>\r\n      </InfoWindow>\r\n    )}\r\n    {props.center && (\r\n      <Circle\r\n        center={props.center}\r\n        radius={props.radius}\r\n        options={{\r\n          fillColor: 'red',\r\n          fillOpacity: 0.20,\r\n          strokeColor: 'red',\r\n          strokeOpacity: 1,\r\n          strokeWeight: 1,\r\n        }}\r\n      />\r\n    )}\r\n  </GoogleMap>\r\n));\r\n\r\n/*\r\n * https://developers.google.com/maps/documentation/javascript/examples/map-geolocation\r\n *\r\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"></script> to your HTML to provide google.maps reference\r\n */\r\nexport default class GeolocationExample extends Component {\r\n\r\n  state = {\r\n    center: null,\r\n    content: null,\r\n    radius: 6000,\r\n  };\r\n\r\n  isUnmounted = false;\r\n\r\n  componentDidMount() {\r\n    const tick = () => {\r\n      if (this.isUnmounted) {\r\n        return;\r\n      }\r\n      this.setState({radius: Math.max(this.state.radius - 20, 0)});\r\n\r\n      if (this.state.radius > 200) {\r\n        raf(tick);\r\n      }\r\n    };\r\n    geolocation.getCurrentPosition((position) => {\r\n      if (this.isUnmounted) {\r\n        return;\r\n      }\r\n      this.setState({\r\n        center: {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        },\r\n        content: `Location found using HTML5.`,\r\n      });\r\n\r\n      raf(tick);\r\n    }, (reason) => {\r\n      if (this.isUnmounted) {\r\n        return;\r\n      }\r\n      this.setState({\r\n        center: {\r\n          lat: 60,\r\n          lng: 105,\r\n        },\r\n        content: `Error: The Geolocation service failed (${reason}).`,\r\n      });\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.isUnmounted = true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <GeolocationExampleGoogleMap\r\n        containerElement={\r\n          <div className=\"embed-responsive embed-responsive-21by9\"/>\r\n        }\r\n        mapElement={<div className=\"embed-responsive-item\"/>}\r\n        center={this.state.center}\r\n        content={this.state.content}\r\n        radius={this.state.radius}\r\n      />\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}