{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchChatUserRequest),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchChatUserConversationRequest),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchChatUser),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchChatUserConversation),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { database } from '../firebase/firebase';\nimport { FETCH_ALL_CHAT_USER, FETCH_ALL_CHAT_USER_CONVERSATION } from 'constants/ActionTypes';\nimport { fetchChatUserConversationSuccess, fetchChatUserSuccess, showChatMessage } from 'actions/Chat';\n\nvar getChatUsers =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return database.ref('prod/chat/users').once('value').then(function (snapshot) {\n              var chatUsers = [];\n              snapshot.forEach(function (rawData) {\n                chatUsers.push(rawData.val());\n              });\n              return chatUsers;\n            }).catch(function (error) {\n              return error;\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getChatUsers() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getUsersConversation =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return database.ref('prod/chat/conversation').once('value').then(function (snapshot) {\n              var conversations = [];\n              snapshot.forEach(function (rawData) {\n                var conversation = rawData.val(); // change object to array\n\n                var conversationDatas = [];\n\n                if (conversation.conversationData) {\n                  conversation.conversationData.forEach(function (conversationData) {\n                    return conversationDatas.push(conversationData);\n                  });\n                }\n\n                conversation.conversationData = conversationDatas;\n                conversations.push(conversation);\n              });\n              return conversations;\n            }).catch(function (error) {\n              return error;\n            });\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getUsersConversation() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfunction fetchChatUserRequest() {\n  var fetchedTodo;\n  return _regeneratorRuntime.wrap(function fetchChatUserRequest$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(getChatUsers);\n\n        case 3:\n          fetchedTodo = _context3.sent;\n          _context3.next = 6;\n          return put(fetchChatUserSuccess(fetchedTodo));\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put(showChatMessage(_context3.t0));\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction fetchChatUserConversationRequest() {\n  var fetchedTodoConversation;\n  return _regeneratorRuntime.wrap(function fetchChatUserConversationRequest$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(getUsersConversation);\n\n        case 3:\n          fetchedTodoConversation = _context4.sent;\n          _context4.next = 6;\n          return put(fetchChatUserConversationSuccess(fetchedTodoConversation));\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 12;\n          return put(showChatMessage(_context4.t0));\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nexport function fetchChatUser() {\n  return _regeneratorRuntime.wrap(function fetchChatUser$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(FETCH_ALL_CHAT_USER, fetchChatUserRequest);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function fetchChatUserConversation() {\n  return _regeneratorRuntime.wrap(function fetchChatUserConversation$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(FETCH_ALL_CHAT_USER_CONVERSATION, fetchChatUserConversationRequest);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked4);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(fetchChatUserConversation), fork(fetchChatUser)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:\\Users\\Noelia\\Desktop\\compra\\source\\src\\sagas\\Chat.js"],"names":["fetchChatUserRequest","fetchChatUserConversationRequest","fetchChatUser","fetchChatUserConversation","rootSaga","all","call","fork","put","takeEvery","database","FETCH_ALL_CHAT_USER","FETCH_ALL_CHAT_USER_CONVERSATION","fetchChatUserConversationSuccess","fetchChatUserSuccess","showChatMessage","getChatUsers","ref","once","then","snapshot","chatUsers","forEach","rawData","push","val","catch","error","getUsersConversation","conversations","conversation","conversationDatas","conversationData","fetchedTodo","fetchedTodoConversation"],"mappings":"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","sourcesContent":["import {all, call, fork, put, takeEvery} from 'redux-saga/effects';\r\nimport {database} from '../firebase/firebase';\r\nimport {FETCH_ALL_CHAT_USER, FETCH_ALL_CHAT_USER_CONVERSATION} from 'constants/ActionTypes';\r\nimport {fetchChatUserConversationSuccess, fetchChatUserSuccess, showChatMessage} from 'actions/Chat';\r\n\r\nconst getChatUsers = async () =>\r\n  await database.ref('prod/chat/users').once('value')\r\n    .then((snapshot) => {\r\n      const chatUsers = [];\r\n      snapshot.forEach((rawData) => {\r\n        chatUsers.push(rawData.val());\r\n      });\r\n      return chatUsers;\r\n    })\r\n    .catch(error => error);\r\n\r\nconst getUsersConversation = async () =>\r\n  await database.ref('prod/chat/conversation').once('value')\r\n    .then((snapshot) => {\r\n      const conversations = [];\r\n      snapshot.forEach((rawData) => {\r\n        const conversation = rawData.val();\r\n\r\n        // change object to array\r\n        const conversationDatas = [];\r\n        if (conversation.conversationData) {\r\n          conversation.conversationData.forEach((conversationData) =>\r\n            conversationDatas.push(conversationData)\r\n          );\r\n        }\r\n        conversation.conversationData = conversationDatas;\r\n        conversations.push(conversation);\r\n      });\r\n\r\n      return conversations;\r\n    })\r\n    .catch(error => error);\r\n\r\n\r\nfunction* fetchChatUserRequest() {\r\n  try {\r\n    const fetchedTodo = yield call(getChatUsers);\r\n    yield put(fetchChatUserSuccess(fetchedTodo));\r\n  } catch (error) {\r\n    yield put(showChatMessage(error));\r\n  }\r\n}\r\n\r\nfunction* fetchChatUserConversationRequest() {\r\n  try {\r\n    const fetchedTodoConversation = yield call(getUsersConversation);\r\n    yield put(fetchChatUserConversationSuccess(fetchedTodoConversation));\r\n  } catch (error) {\r\n    yield put(showChatMessage(error));\r\n  }\r\n}\r\n\r\nexport function* fetchChatUser() {\r\n  yield takeEvery(FETCH_ALL_CHAT_USER, fetchChatUserRequest);\r\n}\r\n\r\nexport function* fetchChatUserConversation() {\r\n  yield takeEvery(FETCH_ALL_CHAT_USER_CONVERSATION, fetchChatUserConversationRequest);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([fork(fetchChatUserConversation), fork(fetchChatUser)]);\r\n}"]},"metadata":{},"sourceType":"module"}