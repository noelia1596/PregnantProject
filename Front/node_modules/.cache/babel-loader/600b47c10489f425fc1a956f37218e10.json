{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\src\\\\app\\\\routes\\\\contact\\\\basic\\\\index.js\";\nimport React, { Component } from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport contactList from '../data/contactList';\nimport ContactList from 'components/contact/ContactList';\nimport AppModuleHeader from 'components/AppModuleHeader/index';\nimport AddContact from 'components/contact/AddContact';\nimport IntlMessages from 'util/IntlMessages';\nimport CustomScrollbars from 'util/CustomScrollbars';\nvar contactId = 723812738;\nvar filterOptions = [{\n  id: 1,\n  name: 'All contacts',\n  icon: 'zmdi-menu'\n}, {\n  id: 2,\n  name: 'Frequently contacted',\n  icon: 'zmdi-time-restore'\n}, {\n  id: 3,\n  name: 'Starred contacts',\n  icon: 'zmdi-star'\n}];\n\nvar Contact =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Contact, _Component);\n\n  function Contact() {\n    var _this;\n\n    _classCallCheck(this, Contact);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Contact).call(this));\n\n    _this.ContactSideBar = function (user) {\n      return React.createElement(\"div\", {\n        className: \"module-side\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"module-side-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"module-logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"zmdi zmdi-account-box mr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(IntlMessages, {\n        id: \"chat.contacts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"module-side-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(CustomScrollbars, {\n        className: \"module-side-scroll scrollbar\",\n        style: {\n          height: _this.props.width >= 1200 ? 'calc(100vh - 200px)' : 'calc(100vh - 80px)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"module-add-task\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"jr-btn btn-block\",\n        variant: \"contained\",\n        color: \"primary\",\n        \"aria-label\": \"add\",\n        onClick: _this.onAddContact,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"zmdi zmdi-account-add zmdi-hc-fw\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Add New Contact\"))), React.createElement(\"div\", {\n        className: \"module-side-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: \"module-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, filterOptions.map(function (option) {\n        return React.createElement(\"li\", {\n          key: option.id,\n          className: \"nav-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"jr-link \".concat(option.id === _this.state.selectedSectionId ? 'active' : ''),\n          onClick: _this.onFilterOptionSelect.bind(_assertThisInitialized(_assertThisInitialized(_this)), option),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"zmdi \".concat(option.icon),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, option.name)));\n      }))))));\n    };\n\n    _this.addFavourite = function (data) {\n      _this.setState({\n        alertMessage: data.starred ? 'Contact removed as star' : 'Contact marked as star',\n        showMessage: true,\n        contactList: _this.state.contactList.map(function (contact) {\n          return contact.id === data.id ? _objectSpread({}, contact, {\n            starred: !data.starred\n          }) : contact;\n        }),\n        allContact: _this.state.allContact.map(function (contact) {\n          return contact.id === data.id ? _objectSpread({}, contact, {\n            starred: !data.starred\n          }) : contact;\n        })\n      });\n    };\n\n    _this.onContactSelect = function (data) {\n      data.selected = !data.selected;\n      var selectedContacts = 0;\n\n      var contactList = _this.state.contactList.map(function (contact) {\n        if (contact.selected) {\n          selectedContacts++;\n        }\n\n        if (contact.id === data.id) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n\n          return data;\n        } else {\n          return contact;\n        }\n      });\n\n      _this.setState({\n        selectedContacts: selectedContacts,\n        contactList: contactList\n      });\n    };\n\n    _this.onAddContact = function () {\n      _this.setState({\n        addContactState: true\n      });\n    };\n\n    _this.onContactClose = function () {\n      _this.setState({\n        addContactState: false\n      });\n    };\n\n    _this.onFilterOptionSelect = function (option) {\n      switch (option.name) {\n        case 'All contacts':\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _this.state.allContact\n            });\n\n            break;\n          }\n\n        case 'Frequently contacted':\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _this.state.allContact.filter(function (contact) {\n                return contact.frequently;\n              })\n            });\n\n            break;\n          }\n\n        case 'Starred contacts':\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _this.state.allContact.filter(function (contact) {\n                return contact.starred;\n              })\n            });\n\n            break;\n          }\n\n        default:\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _this.state.allContact\n            });\n          }\n      }\n    };\n\n    _this.onSaveContact = function (data) {\n      var isNew = true;\n\n      var contactList = _this.state.allContact.map(function (contact) {\n        if (contact.id === data.id) {\n          isNew = false;\n          return data;\n        } else {\n          return contact;\n        }\n      });\n\n      if (isNew) {\n        contactList.push(data);\n      }\n\n      _this.setState({\n        alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n        showMessage: true,\n        contactList: contactList,\n        allContact: contactList\n      }); // this.onFilterOptionSelect(this.state.filterOption);\n\n    };\n\n    _this.onDeleteContact = function (data) {\n      _this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: _this.state.allContact.filter(function (contact) {\n          return contact.id !== data.id;\n        }),\n        contactList: _this.state.allContact.filter(function (contact) {\n          return contact.id !== data.id;\n        })\n      });\n    };\n\n    _this.onDeleteSelectedContact = function () {\n      var contacts = _this.state.allContact.filter(function (contact) {\n        return !contact.selected;\n      });\n\n      _this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: contacts,\n        contactList: contacts,\n        selectedContacts: 0\n      });\n    };\n\n    _this.filterContact = function (userName) {\n      var filterOption = _this.state.filterOption;\n\n      if (userName === '') {\n        _this.setState({\n          contactList: _this.state.allContact\n        });\n      } else {\n        var filterContact = _this.state.allContact.filter(function (contact) {\n          return contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1;\n        });\n\n        if (filterOption === 'All contacts') {\n          _this.setState({\n            contactList: filterContact\n          });\n        } else if (filterOption === 'Frequently contacted') {\n          _this.setState({\n            contactList: filterContact.filter(function (contact) {\n              return contact.frequently;\n            })\n          });\n        } else if (filterOption === 'Starred contacts') {\n          _this.setState({\n            contactList: filterContact.filter(function (contact) {\n              return contact.starred;\n            })\n          });\n        }\n      }\n    };\n\n    _this.handleRequestClose = function () {\n      _this.setState({\n        showMessage: false\n      });\n    };\n\n    _this.getAllContact = function () {\n      var contactList = _this.state.allContact.map(function (contact) {\n        return contact ? _objectSpread({}, contact, {\n          selected: true\n        }) : contact;\n      });\n\n      _this.setState({\n        selectedContacts: contactList.length,\n        allContact: contactList,\n        contactList: contactList\n      });\n    };\n\n    _this.getUnselectedAllContact = function () {\n      var contactList = _this.state.allContact.map(function (contact) {\n        return contact ? _objectSpread({}, contact, {\n          selected: false\n        }) : contact;\n      });\n\n      _this.setState({\n        selectedContacts: 0,\n        allContact: contactList,\n        contactList: contactList\n      });\n    };\n\n    _this.state = {\n      noContentFoundMessage: 'No contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false\n    };\n    return _this;\n  }\n\n  _createClass(Contact, [{\n    key: \"onAllContactSelect\",\n    value: function onAllContactSelect() {\n      var selectAll = this.state.selectedContacts < this.state.contactList.length;\n\n      if (selectAll) {\n        this.getAllContact();\n      } else {\n        this.getUnselectedAllContact();\n      }\n    }\n  }, {\n    key: \"updateContactUser\",\n    value: function updateContactUser(evt) {\n      this.setState({\n        searchUser: evt.target.value\n      });\n      this.filterContact(evt.target.value);\n    }\n  }, {\n    key: \"onToggleDrawer\",\n    value: function onToggleDrawer() {\n      this.setState({\n        drawerState: !this.state.drawerState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          user = _this$state.user,\n          contactList = _this$state.contactList,\n          addContactState = _this$state.addContactState,\n          selectedContacts = _this$state.selectedContacts,\n          alertMessage = _this$state.alertMessage,\n          showMessage = _this$state.showMessage,\n          noContentFoundMessage = _this$state.noContentFoundMessage;\n      return React.createElement(\"div\", {\n        className: \"app-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"app-module animated slideInUpTiny animation-duration-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"d-block d-xl-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, React.createElement(Drawer, {\n        open: this.state.drawerState,\n        onClose: this.onToggleDrawer.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, this.ContactSideBar(user))), React.createElement(\"div\", {\n        className: \"app-module-sidenav d-none d-xl-flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, this.ContactSideBar(user)), React.createElement(\"div\", {\n        className: \"module-box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"module-box-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        className: \"drawer-btn d-block d-xl-none\",\n        \"aria-label\": \"Menu\",\n        onClick: this.onToggleDrawer.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"zmdi zmdi-menu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      })), React.createElement(AppModuleHeader, {\n        placeholder: \"Search contact\",\n        notification: false,\n        apps: false,\n        user: this.state.user,\n        onChange: this.updateContactUser.bind(this),\n        value: this.state.searchUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"module-box-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"module-box-topbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        color: \"primary\",\n        indeterminate: selectedContacts > 0 && selectedContacts < contactList.length,\n        checked: selectedContacts > 0,\n        onChange: this.onAllContactSelect.bind(this),\n        value: \"SelectMail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }), selectedContacts > 0 && React.createElement(IconButton, {\n        className: \"icon-btn\",\n        onClick: this.onDeleteSelectedContact.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"zmdi zmdi-delete\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }))), React.createElement(CustomScrollbars, {\n        className: \"module-list-scroll scrollbar\",\n        style: {\n          height: this.props.width >= 1200 ? 'calc(100vh - 265px)' : 'calc(100vh - 245px)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, contactList.length === 0 ? React.createElement(\"div\", {\n        className: \"h-100 d-flex align-items-center justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, noContentFoundMessage) : React.createElement(ContactList, {\n        contactList: contactList,\n        addFavourite: this.addFavourite.bind(this),\n        onContactSelect: this.onContactSelect.bind(this),\n        onDeleteContact: this.onDeleteContact.bind(this),\n        onSaveContact: this.onSaveContact.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }))))), React.createElement(AddContact, {\n        open: addContactState,\n        contact: {\n          'id': contactId++,\n          'name': '',\n          'thumb': '',\n          'email': '',\n          'phone': '',\n          'designation': '',\n          'selected': false,\n          'starred': false,\n          'frequently': false\n        },\n        onSaveContact: this.onSaveContact,\n        onContactClose: this.onContactClose,\n        onDeleteContact: this.onDeleteContact,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }), React.createElement(Snackbar, {\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'center'\n        },\n        open: showMessage,\n        autoHideDuration: 3000,\n        onClose: this.handleRequestClose,\n        ContentProps: {\n          'aria-describedby': 'message-id'\n        },\n        message: React.createElement(\"span\", {\n          id: \"message-id\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372\n          },\n          __self: this\n        }, alertMessage),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Contact;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var settings = _ref.settings;\n  var width = settings.width;\n  return {\n    width: width\n  };\n};\n\nexport default connect(mapStateToProps)(Contact);","map":{"version":3,"sources":["C:\\Users\\Noelia\\Desktop\\compra\\source\\src\\app\\routes\\contact\\basic\\index.js"],"names":["React","Component","Drawer","IconButton","Checkbox","connect","Button","Snackbar","contactList","ContactList","AppModuleHeader","AddContact","IntlMessages","CustomScrollbars","contactId","filterOptions","id","name","icon","Contact","ContactSideBar","user","height","props","width","onAddContact","map","option","state","selectedSectionId","onFilterOptionSelect","bind","addFavourite","data","setState","alertMessage","starred","showMessage","contact","allContact","onContactSelect","selected","selectedContacts","addContactState","onContactClose","filterOption","filter","frequently","onSaveContact","isNew","push","onDeleteContact","onDeleteSelectedContact","contacts","filterContact","userName","toLowerCase","indexOf","handleRequestClose","getAllContact","length","getUnselectedAllContact","noContentFoundMessage","drawerState","email","avatar","searchUser","selectedContact","selectAll","evt","target","value","onToggleDrawer","updateContactUser","onAllContactSelect","vertical","horizontal","mapStateToProps","settings"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {connect} from 'react-redux';\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport contactList from '../data/contactList';\r\nimport ContactList from 'components/contact/ContactList';\r\nimport AppModuleHeader from 'components/AppModuleHeader/index';\r\nimport AddContact from 'components/contact/AddContact';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport CustomScrollbars from 'util/CustomScrollbars';\r\n\r\nlet contactId = 723812738;\r\n\r\nconst filterOptions = [\r\n  {\r\n    id: 1,\r\n    name: 'All contacts',\r\n    icon: 'zmdi-menu'\r\n  }, {\r\n    id: 2,\r\n    name: 'Frequently contacted',\r\n    icon: 'zmdi-time-restore'\r\n\r\n  }, {\r\n\r\n    id: 3,\r\n    name: 'Starred contacts',\r\n    icon: 'zmdi-star'\r\n  }\r\n];\r\n\r\nclass Contact extends Component {\r\n\r\n  ContactSideBar = (user) => {\r\n    return <div className=\"module-side\">\r\n      <div className=\"module-side-header\">\r\n        <div className=\"module-logo\">\r\n          <i className=\"zmdi zmdi-account-box mr-4\"/>\r\n          <span><IntlMessages id=\"chat.contacts\"/></span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"module-side-content\">\r\n        <CustomScrollbars className=\"module-side-scroll scrollbar\"\r\n                          style={{height: this.props.width >= 1200 ? 'calc(100vh - 200px)' : 'calc(100vh - 80px)'}}>\r\n          <div className=\"module-add-task\">\r\n            <Button className=\"jr-btn btn-block\" variant=\"contained\" color=\"primary\" aria-label=\"add\"\r\n                    onClick={this.onAddContact}>\r\n              <i className=\"zmdi zmdi-account-add zmdi-hc-fw\"/>\r\n              <span>Add New Contact</span>\r\n            </Button>\r\n          </div>\r\n          <div className=\"module-side-nav\">\r\n            <ul className=\"module-nav\">\r\n              {filterOptions.map(option => <li key={option.id} className=\"nav-item\">\r\n                  <span\r\n                     className={`jr-link ${option.id === this.state.selectedSectionId ? 'active' : ''}`} onClick={\r\n                    this.onFilterOptionSelect.bind(this, option)\r\n                  }>\r\n                    <i className={`zmdi ${option.icon}`}/>\r\n                    <span>{option.name}</span>\r\n                  </span>\r\n                </li>\r\n              )}\r\n\r\n            </ul>\r\n          </div>\r\n        </CustomScrollbars>\r\n      </div>\r\n    </div>\r\n\r\n  };\r\n\r\n  addFavourite = (data) => {\r\n    this.setState({\r\n      alertMessage: data.starred ? 'Contact removed as star' : 'Contact marked as star',\r\n      showMessage: true,\r\n      contactList: this.state.contactList.map((contact) => contact.id === data.id ? {\r\n        ...contact,\r\n        starred: !data.starred\r\n      } : contact),\r\n      allContact: this.state.allContact.map((contact) => contact.id === data.id ? {\r\n        ...contact,\r\n        starred: !data.starred\r\n      } : contact)\r\n    })\r\n  };\r\n  onContactSelect = (data) => {\r\n    data.selected = !data.selected;\r\n    let selectedContacts = 0;\r\n    const contactList = this.state.contactList.map(contact => {\r\n        if (contact.selected) {\r\n          selectedContacts++;\r\n        }\r\n        if (contact.id === data.id) {\r\n          if (contact.selected) {\r\n            selectedContacts++;\r\n          }\r\n          return data;\r\n        } else {\r\n          return contact;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      selectedContacts: selectedContacts,\r\n      contactList: contactList\r\n    });\r\n\r\n  };\r\n\r\n\r\n  onAddContact = () => {\r\n    this.setState({addContactState: true});\r\n  };\r\n  onContactClose = () => {\r\n    this.setState({addContactState: false});\r\n  };\r\n  onFilterOptionSelect = (option) => {\r\n    switch (option.name) {\r\n      case 'All contacts': {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact\r\n        });\r\n        break;\r\n      }\r\n      case 'Frequently contacted': {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact.filter((contact) => contact.frequently)\r\n        });\r\n        break;\r\n      }\r\n      case 'Starred contacts': {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact.filter((contact) => contact.starred)\r\n        });\r\n        break;\r\n      }\r\n      default: {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact\r\n        });\r\n      }\r\n    }\r\n\r\n  };\r\n  onSaveContact = (data) => {\r\n    let isNew = true;\r\n    const contactList = this.state.allContact.map((contact) => {\r\n      if (contact.id === data.id) {\r\n        isNew = false;\r\n        return data\r\n      } else {\r\n        return contact\r\n      }\r\n    });\r\n    if (isNew) {\r\n      contactList.push(data);\r\n    }\r\n    this.setState({\r\n      alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\r\n      showMessage: true,\r\n      contactList: contactList,\r\n      allContact: contactList\r\n    });\r\n    // this.onFilterOptionSelect(this.state.filterOption);\r\n  };\r\n  onDeleteContact = (data) => {\r\n    this.setState({\r\n      alertMessage: 'Contact Deleted Successfully',\r\n      showMessage: true,\r\n      allContact: this.state.allContact.filter((contact) => contact.id !== data.id),\r\n      contactList: this.state.allContact.filter((contact) => contact.id !== data.id)\r\n    })\r\n  };\r\n  onDeleteSelectedContact = () => {\r\n    const contacts = this.state.allContact.filter((contact) => !contact.selected);\r\n    this.setState({\r\n      alertMessage: 'Contact Deleted Successfully',\r\n      showMessage: true,\r\n      allContact: contacts,\r\n      contactList: contacts,\r\n      selectedContacts: 0\r\n    })\r\n  };\r\n  filterContact = (userName) => {\r\n    const {filterOption} = this.state;\r\n    if (userName === '') {\r\n      this.setState({contactList: this.state.allContact});\r\n    } else {\r\n      const filterContact = this.state.allContact.filter((contact) =>\r\n        contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\r\n      if (filterOption === 'All contacts') {\r\n        this.setState({contactList: filterContact});\r\n      } else if (filterOption === 'Frequently contacted') {\r\n        this.setState({contactList: filterContact.filter((contact) => contact.frequently)});\r\n\r\n      } else if (filterOption === 'Starred contacts') {\r\n        this.setState({contactList: filterContact.filter((contact) => contact.starred)});\r\n      }\r\n    }\r\n  };\r\n  handleRequestClose = () => {\r\n    this.setState({\r\n      showMessage: false,\r\n    });\r\n  };\r\n  getAllContact = () => {\r\n    let contactList = this.state.allContact.map((contact) => contact ? {\r\n      ...contact,\r\n      selected: true\r\n    } : contact);\r\n    this.setState({\r\n      selectedContacts: contactList.length,\r\n      allContact: contactList,\r\n      contactList: contactList\r\n    });\r\n  };\r\n  getUnselectedAllContact = () => {\r\n    let contactList = this.state.allContact.map((contact) => contact ? {\r\n      ...contact,\r\n      selected: false\r\n    } : contact);\r\n    this.setState({\r\n      selectedContacts: 0,\r\n      allContact: contactList,\r\n      contactList: contactList\r\n    });\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      noContentFoundMessage: 'No contact found in selected folder',\r\n      alertMessage: '',\r\n      showMessage: false,\r\n      selectedSectionId: 1,\r\n      drawerState: false,\r\n      user: {\r\n        name: 'Robert Johnson',\r\n        email: 'robert.johnson@example.com',\r\n        avatar: 'https://via.placeholder.com/150x150'\r\n      },\r\n      searchUser: '',\r\n      filterOption: 'All contacts',\r\n      allContact: contactList,\r\n      contactList: contactList,\r\n      selectedContact: null,\r\n      selectedContacts: 0,\r\n      addContactState: false,\r\n    }\r\n  }\r\n\r\n  onAllContactSelect() {\r\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\r\n    if (selectAll) {\r\n      this.getAllContact();\r\n    } else {\r\n      this.getUnselectedAllContact();\r\n    }\r\n  }\r\n\r\n  updateContactUser(evt) {\r\n    this.setState({\r\n      searchUser: evt.target.value,\r\n    });\r\n    this.filterContact(evt.target.value)\r\n  }\r\n\r\n  onToggleDrawer() {\r\n    this.setState({\r\n      drawerState: !this.state.drawerState\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {user, contactList, addContactState, selectedContacts, alertMessage, showMessage, noContentFoundMessage} = this.state;\r\n    return (\r\n      <div className=\"app-wrapper\">\r\n        <div className=\"app-module animated slideInUpTiny animation-duration-3\">\r\n\r\n          <div className=\"d-block d-xl-none\">\r\n            <Drawer\r\n              open={this.state.drawerState}\r\n              onClose={this.onToggleDrawer.bind(this)}>\r\n              {this.ContactSideBar(user)}\r\n            </Drawer>\r\n          </div>\r\n          <div className=\"app-module-sidenav d-none d-xl-flex\">\r\n            {this.ContactSideBar(user)}\r\n          </div>\r\n\r\n          <div className=\"module-box\">\r\n            <div className=\"module-box-header\">\r\n              <IconButton className=\"drawer-btn d-block d-xl-none\" aria-label=\"Menu\"\r\n                          onClick={this.onToggleDrawer.bind(this)}>\r\n                <i className=\"zmdi zmdi-menu\"/>\r\n              </IconButton>\r\n              <AppModuleHeader placeholder=\"Search contact\" notification={false} apps={false}\r\n                               user={this.state.user}\r\n                               onChange={this.updateContactUser.bind(this)}\r\n                               value={this.state.searchUser}/>\r\n            </div>\r\n            <div className=\"module-box-content\">\r\n\r\n              <div className=\"module-box-topbar\">\r\n                <Checkbox color=\"primary\"\r\n                          indeterminate={selectedContacts > 0 && selectedContacts < contactList.length}\r\n                          checked={selectedContacts > 0}\r\n                          onChange={this.onAllContactSelect.bind(this)}\r\n                          value=\"SelectMail\"/>\r\n\r\n\r\n                {selectedContacts > 0 &&\r\n                <IconButton className=\"icon-btn\"\r\n                  onClick={this.onDeleteSelectedContact.bind(this)}>\r\n                  <i className=\"zmdi zmdi-delete\"/>\r\n                </IconButton>}\r\n\r\n              </div>\r\n              <CustomScrollbars className=\"module-list-scroll scrollbar\"\r\n                                style={{height: this.props.width >= 1200 ? 'calc(100vh - 265px)' : 'calc(100vh - 245px)'}}>\r\n                {contactList.length === 0 ?\r\n                  <div className=\"h-100 d-flex align-items-center justify-content-center\">\r\n                    {noContentFoundMessage}\r\n                  </div>\r\n                  : <ContactList contactList={contactList}\r\n                                 addFavourite={this.addFavourite.bind(this)}\r\n                                 onContactSelect={this.onContactSelect.bind(this)}\r\n                                 onDeleteContact={this.onDeleteContact.bind(this)}\r\n                                 onSaveContact={this.onSaveContact.bind(this)}/>\r\n                }\r\n\r\n\r\n              </CustomScrollbars>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <AddContact open={addContactState} contact={{\r\n          'id': contactId++,\r\n          'name': '',\r\n          'thumb': '',\r\n          'email': '',\r\n          'phone': '',\r\n          'designation': '',\r\n          'selected': false,\r\n          'starred': false,\r\n          'frequently': false,\r\n        }} onSaveContact={this.onSaveContact}\r\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\r\n        <Snackbar\r\n          anchorOrigin={{vertical: 'top', horizontal: 'center'}}\r\n          open={showMessage}\r\n          autoHideDuration={3000}\r\n          onClose={this.handleRequestClose}\r\n          ContentProps={{\r\n            'aria-describedby': 'message-id',\r\n          }}\r\n          message={<span id=\"message-id\">{alertMessage}</span>}\r\n        /></div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({settings}) => {\r\n  const {width} = settings;\r\n  return {width}\r\n};\r\nexport default connect(mapStateToProps)(Contact);"]},"metadata":{},"sourceType":"module"}