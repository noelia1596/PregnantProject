{"ast":null,"code":"\"use strict\";\n\nvar _assign = require(\"babel-runtime/core-js/object/assign\"),\n    _assign2 = _interopRequireDefault(_assign),\n    _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\"),\n    _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf),\n    _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\"),\n    _classCallCheck3 = _interopRequireDefault(_classCallCheck2),\n    _createClass2 = require(\"babel-runtime/helpers/createClass\"),\n    _createClass3 = _interopRequireDefault(_createClass2),\n    _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\"),\n    _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2),\n    _inherits2 = require(\"babel-runtime/helpers/inherits\"),\n    _inherits3 = _interopRequireDefault(_inherits2),\n    _react = require(\"react\"),\n    _react2 = _interopRequireDefault(_react),\n    _propTypes = require(\"prop-types\"),\n    _propTypes2 = _interopRequireDefault(_propTypes),\n    _d = require(\"d3\"),\n    _validators = require(\"./util/validators\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n});\n\nfunction _interopRequireDefault(a) {\n  return a && a.__esModule ? a : {\n    default: a\n  };\n}\n\nvar ReactSpeedometer = function (a) {\n  function b(a) {\n    (0, _classCallCheck3.default)(this, b);\n    var c = (0, _possibleConstructorReturn3.default)(this, (b.__proto__ || (0, _getPrototypeOf2.default)(b)).call(this, a));\n    return c.render = function () {\n      return _react2.default.createElement(\"div\", {\n        ref: function ref(a) {\n          return c.gaugeDiv = a;\n        }\n      });\n    }, c._d3_refs = {\n      powerGauge: !1\n    }, c.initialValue = 0, c;\n  }\n\n  return (0, _inherits3.default)(b, a), (0, _createClass3.default)(b, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {}\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.renderGauge();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps() {\n      this.initialValue = this.props.value || 0;\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(a) {\n      return !0;\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {}\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.props.forceRender ? this.renderGauge() : this.updateReadings();\n    }\n  }, {\n    key: \"getGauge\",\n    value: function getGauge() {\n      var a = this,\n          b = this.props;\n      return function (c) {\n        function e(a) {\n          return a * Math.PI / 180;\n        }\n\n        function d() {\n          k = j.maxAngle - j.minAngle, i = j.width / 2, l = (0, _validators.calculateNeedleHeight)(j.needleHeightRatio, i), o = (0, _d.scaleLinear)().range([0, 1]).domain([j.minValue, j.maxValue]), p = o.ticks(j.majorTicks), 1 === p.length && (p = [j.minValue, j.maxValue]), q = (0, _d.range)(j.majorTicks).map(function () {\n            return 1 / j.majorTicks;\n          }), n = (0, _d.arc)().innerRadius(i - j.ringWidth - j.ringInset).outerRadius(i - j.ringInset).startAngle(function (a, b) {\n            return e(j.minAngle + a * b * k);\n          }).endAngle(function (a, b) {\n            return e(j.minAngle + a * (b + 1) * k);\n          });\n        }\n\n        function f() {\n          return \"translate(\" + i + \",\" + i + \")\";\n        }\n\n        function g(a) {\n          var b = j.labelFormat(a);\n          return j.currentValueText.replace(\"${value}\", b);\n\n          var c = function (a, b) {\n            return new Function(b, \"return `\" + a + \"`;\");\n          }(j.currentValueText, \"value\");\n        }\n\n        var h = {\n          ringInset: 20,\n          pointerWidth: 10,\n          pointerTailLength: 5,\n          minAngle: -90,\n          maxAngle: 90,\n          labelInset: 10,\n          parentWidth: a.gaugeDiv.parentNode.clientWidth,\n          parentHeight: a.gaugeDiv.parentNode.clientHeight\n        },\n            j = {\n          width: b.fluidWidth ? h.parentWidth : b.width,\n          height: b.fluidWidth ? h.parentHeight : b.height,\n          ringWidth: b.ringWidth,\n          minValue: b.minValue,\n          maxValue: b.maxValue,\n          needleColor: b.needleColor,\n          majorTicks: b.segments,\n          arcColorFn: (0, _d.interpolateHsl)((0, _d.rgb)(b.startColor), (0, _d.rgb)(b.endColor)),\n          needleTransition: b.needleTransition,\n          needleTransitionDuration: b.needleTransitionDuration,\n          needleHeightRatio: b.needleHeightRatio,\n          textColor: b.textColor,\n          labelFormat: (0, _d.format)(b.valueFormat),\n          currentValueText: b.currentValueText\n        };\n        j = (0, _assign2.default)({}, h, j);\n        var k,\n            i,\n            l,\n            m,\n            n,\n            o,\n            p,\n            q,\n            r = (0, _d.pie)();\n        return d(), {\n          configure: d,\n          isRendered: function isRendered() {\n            return void 0 != m;\n          },\n          render: function render() {\n            m = (0, _d.select)(c).append(\"svg:svg\").attr(\"class\", \"speedometer\").attr(\"width\", j.width).attr(\"height\", j.height);\n            var b = f(),\n                d = m.append(\"g\").attr(\"class\", \"arc\").attr(\"transform\", b);\n            d.selectAll(\"path\").data(q).enter().append(\"path\").attr(\"class\", \"speedo-segment\").attr(\"fill\", function (a, b) {\n              return j.arcColorFn(a * b);\n            }).attr(\"d\", n);\n            var e = m.append(\"g\").attr(\"class\", \"label\").attr(\"transform\", b);\n            e.selectAll(\"text\").data(p).enter().append(\"text\").attr(\"transform\", function (a) {\n              var b = o(a),\n                  c = j.minAngle + b * k;\n              return \"rotate(\" + c + \") translate(0,\" + (j.labelInset - i) + \")\";\n            }).text(j.labelFormat).attr(\"class\", \"segment-value\").style(\"text-anchor\", \"middle\").style(\"font-size\", \"14px\").style(\"font-weight\", \"bold\").style(\"fill\", j.textColor), a._d3_refs.current_value_text = m.append(\"g\").attr(\"transform\", \"translate(\" + j.width / 2 + \",\" + j.width / 2 + \")\").append(\"text\").attr(\"class\", \"current-value\").attr(\"text-anchor\", \"middle\").attr(\"y\", 23).text(j.currentValue || \"\").style(\"font-size\", \"16px\").style(\"font-weight\", \"bold\").style(\"fill\", j.textColor);\n            var g = [[j.pointerWidth / 2, 0], [0, -l], [-(j.pointerWidth / 2), 0], [0, j.pointerTailLength], [j.pointerWidth / 2, 0]],\n                h = (0, _d.line)().curve(_d.curveMonotoneX),\n                r = m.append(\"g\").data([g]).attr(\"class\", \"pointer\").attr(\"transform\", b).style(\"fill\", j.needleColor);\n            a._d3_refs.pointer = r.append(\"path\").attr(\"d\", h).attr(\"transform\", \"rotate(\" + j.minAngle + \")\");\n          },\n          update: function update(b) {\n            var c = o(b),\n                d = j.minAngle + c * k;\n            a._d3_refs.pointer.transition().duration(j.needleTransitionDuration).ease(a.getTransitionMethod(j.needleTransition)).attr(\"transform\", \"rotate(\" + d + \")\"), a._d3_refs.current_value_text.text(g(b));\n          },\n          config: j\n        };\n      };\n    }\n  }, {\n    key: \"renderGauge\",\n    value: function renderGauge() {\n      (0, _d.select)(this.gaugeDiv).select(\"svg\").remove(), this._d3_refs.powerGauge = this.getGauge()(this.gaugeDiv), this._d3_refs.powerGauge.render(this.initialValue), this.updateReadings();\n    }\n  }, {\n    key: \"updateReadings\",\n    value: function updateReadings() {\n      this._d3_refs.powerGauge.config.labelFormat = (0, _d.format)(this.props.valueFormat || \"\"), this._d3_refs.powerGauge.config.currentValueText = this.props.currentValueText || \"${value}\", this._d3_refs.powerGauge.update(this.props.value || 0);\n    }\n  }, {\n    key: \"getTransitionMethod\",\n    value: function getTransitionMethod(a) {\n      switch (a) {\n        case \"easeLinear\":\n          return _d.easeLinear;\n          break;\n\n        case \"easeQuadIn\":\n          return _d.easeQuadIn;\n          break;\n\n        case \"easeQuadOut\":\n          return _d.easeQuadOut;\n          break;\n\n        case \"easeQuadInOut\":\n          return _d.easeQuadInOut;\n          break;\n\n        case \"easeCubicIn\":\n          return _d.easeCubicIn;\n          break;\n\n        case \"easeCubicOut\":\n          return _d.easeCubicOut;\n          break;\n\n        case \"easeCubicInOut\":\n          return _d.easeCubicInOut;\n          break;\n\n        case \"easePolyIn\":\n          return _d.easePolyIn;\n          break;\n\n        case \"easePolyOut\":\n          return _d.easePolyOut;\n          break;\n\n        case \"easePolyInOut\":\n          return _d.easePolyInOut;\n          break;\n\n        case \"easeSinIn\":\n          return _d.easeSinIn;\n          break;\n\n        case \"easeSinOut\":\n          return _d.easeSinOut;\n          break;\n\n        case \"easeSinInOut\":\n          return _d.easeSinInOut;\n          break;\n\n        case \"easeExpIn\":\n          return _d.easeExpIn;\n          break;\n\n        case \"easeExpOut\":\n          return _d.easeExpOut;\n          break;\n\n        case \"easeExpInOut\":\n          return _d.easeExpInOut;\n          break;\n\n        case \"easeCircleIn\":\n          return _d.easeCircleIn;\n          break;\n\n        case \"easeCircleOut\":\n          return _d.easeCircleOut;\n          break;\n\n        case \"easeCircleInOut\":\n          return _d.easeCircleInOut;\n          break;\n\n        case \"easeBounceIn\":\n          return _d.easeBounceIn;\n          break;\n\n        case \"easeBounceOut\":\n          return _d.easeBounceOut;\n          break;\n\n        case \"easeBounceInOut\":\n          return _d.easeBounceInOut;\n          break;\n\n        case \"easeBackIn\":\n          return _d.easeBackIn;\n          break;\n\n        case \"easeBackOut\":\n          return _d.easeBackOut;\n          break;\n\n        case \"easeBackInOut\":\n          return _d.easeBackInOut;\n          break;\n\n        case \"easeElasticIn\":\n          return _d.easeElasticIn;\n          break;\n\n        case \"easeElasticOut\":\n          return _d.easeElasticOut;\n          break;\n\n        case \"easeElasticInOut\":\n          return _d.easeElasticInOut;\n          break;\n\n        case \"easeElastic\":\n          return _d.easeElastic;\n          break;\n\n        case \"easeElastic\":\n          return _d.easeElastic;\n          break;\n\n        default:\n          return _d.easeQuadInOut;\n      }\n    }\n  }]), b;\n}(_react2.default.Component);\n\nReactSpeedometer.displayName = \"ReactSpeedometer\", ReactSpeedometer.propTypes = {\n  value: _propTypes2.default.number.isRequired,\n  minValue: _propTypes2.default.number.isRequired,\n  maxValue: _propTypes2.default.number.isRequired,\n  forceRender: _propTypes2.default.bool.isRequired,\n  width: _propTypes2.default.number.isRequired,\n  height: _propTypes2.default.number.isRequired,\n  fluidWidth: _propTypes2.default.bool.isRequired,\n  segments: _propTypes2.default.number.isRequired,\n  needleColor: _propTypes2.default.string.isRequired,\n  startColor: _propTypes2.default.string.isRequired,\n  endColor: _propTypes2.default.string.isRequired,\n  needleTransition: _propTypes2.default.string.isRequired,\n  needleTransitionDuration: _propTypes2.default.number.isRequired,\n  needleHeightRatio: _propTypes2.default.number.isRequired,\n  ringWidth: _propTypes2.default.number.isRequired,\n  textColor: _propTypes2.default.string.isRequired,\n  valueFormat: _propTypes2.default.string.isRequired,\n  currentValueText: _propTypes2.default.string.isRequired\n}, ReactSpeedometer.defaultProps = {\n  value: 0,\n  minValue: 0,\n  maxValue: 1e3,\n  forceRender: !1,\n  width: 300,\n  height: 300,\n  fluidWidth: !1,\n  segments: 5,\n  needleColor: \"steelblue\",\n  startColor: \"#FF471A\",\n  endColor: \"#33CC33\",\n  needleTransition: \"easeQuadInOut\",\n  needleTransitionDuration: 500,\n  needleHeightRatio: 0.9,\n  ringWidth: 60,\n  textColor: \"#666\",\n  valueFormat: \"\",\n  currentValueText: \"${value}\"\n}, exports.default = ReactSpeedometer;","map":null,"metadata":{},"sourceType":"script"}