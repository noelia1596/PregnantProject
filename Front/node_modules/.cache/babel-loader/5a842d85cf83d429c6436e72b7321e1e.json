{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchMailRequest),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { fetchMailsSuccess, showMailMessage } from 'actions/Mail';\nimport { database } from '../firebase/firebase';\nimport { FETCH_ALL_MAIL } from 'constants/ActionTypes';\n\nvar getMails =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return database.ref('prod/mail').once('value').then(function (snapshot) {\n              var mails = [];\n              snapshot.forEach(function (rawData) {\n                var mail = rawData.val(); // change object to array\n\n                var labels = [];\n\n                if (mail.labels) {\n                  mail.labels.forEach(function (label) {\n                    return labels.push(label);\n                  });\n                } // change object to array\n\n\n                var tos = [];\n                mail.to.forEach(function (to) {\n                  return tos.push(to);\n                });\n                mail.to = tos;\n                mail.labels = labels;\n                mails.push(mail);\n              });\n              return mails;\n            }).catch(function (error) {\n              return error;\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getMails() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction fetchMailRequest() {\n  var fetchedMail;\n  return _regeneratorRuntime.wrap(function fetchMailRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(getMails);\n\n        case 3:\n          fetchedMail = _context2.sent;\n          _context2.next = 6;\n          return put(fetchMailsSuccess(fetchedMail));\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put(showMailMessage(_context2.t0));\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery(FETCH_ALL_MAIL, fetchMailRequest)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Users\\Noelia\\Desktop\\compra\\source\\src\\sagas\\Mail.js"],"names":["fetchMailRequest","rootSaga","all","call","put","takeEvery","fetchMailsSuccess","showMailMessage","database","FETCH_ALL_MAIL","getMails","ref","once","then","snapshot","mails","forEach","rawData","mail","val","labels","label","push","tos","to","catch","error","fetchedMail"],"mappings":";;;;;yBAmCUA,gB;;;yBAUeC,Q;;AA7CzB,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,SAAxB,QAAwC,oBAAxC;AACA,SAAQC,iBAAR,EAA2BC,eAA3B,QAAiD,cAAjD;AACA,SAAQC,QAAR,QAAuB,sBAAvB;AACA,SAAQC,cAAR,QAA6B,uBAA7B;;AAEA,IAAMC,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACTF,QAAQ,CAACG,GAAT,CAAa,WAAb,EAA0BC,IAA1B,CAA+B,OAA/B,EACHC,IADG,CACE,UAACC,QAAD,EAAc;AAClB,kBAAMC,KAAK,GAAG,EAAd;AACAD,cAAAA,QAAQ,CAACE,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC5B,oBAAMC,IAAI,GAAGD,OAAO,CAACE,GAAR,EAAb,CAD4B,CAG5B;;AACA,oBAAMC,MAAM,GAAG,EAAf;;AACA,oBAAIF,IAAI,CAACE,MAAT,EAAiB;AACfF,kBAAAA,IAAI,CAACE,MAAL,CAAYJ,OAAZ,CAAoB,UAACK,KAAD;AAAA,2BAClBD,MAAM,CAACE,IAAP,CAAYD,KAAZ,CADkB;AAAA,mBAApB;AAGD,iBAT2B,CAW5B;;;AACA,oBAAME,GAAG,GAAG,EAAZ;AACAL,gBAAAA,IAAI,CAACM,EAAL,CAAQR,OAAR,CAAgB,UAACQ,EAAD;AAAA,yBACdD,GAAG,CAACD,IAAJ,CAASE,EAAT,CADc;AAAA,iBAAhB;AAIAN,gBAAAA,IAAI,CAACM,EAAL,GAAUD,GAAV;AACAL,gBAAAA,IAAI,CAACE,MAAL,GAAcA,MAAd;AACAL,gBAAAA,KAAK,CAACO,IAAN,CAAWJ,IAAX;AACD,eApBD;AAqBA,qBAAOH,KAAP;AACD,aAzBG,EA0BHU,KA1BG,CA0BG,UAAAC,KAAK;AAAA,qBAAIA,KAAJ;AAAA,aA1BR,CADS;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARhB,QAAQ;AAAA;AAAA;AAAA,GAAd;;AA8BA,SAAUV,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEwB,iBAAMG,IAAI,CAACO,QAAD,CAAV;;AAFxB;AAEUiB,UAAAA,WAFV;AAAA;AAGI,iBAAMvB,GAAG,CAACE,iBAAiB,CAACqB,WAAD,CAAlB,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKI,iBAAMvB,GAAG,CAACG,eAAe,cAAhB,CAAT;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,eAAe,SAAUN,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACG,SAAS,CAACI,cAAD,EAAiBT,gBAAjB,CAAV,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, call, put, takeEvery} from 'redux-saga/effects';\r\nimport {fetchMailsSuccess, showMailMessage} from 'actions/Mail';\r\nimport {database} from '../firebase/firebase';\r\nimport {FETCH_ALL_MAIL} from 'constants/ActionTypes';\r\n\r\nconst getMails = async () =>\r\n  await database.ref('prod/mail').once('value')\r\n    .then((snapshot) => {\r\n      const mails = [];\r\n      snapshot.forEach((rawData) => {\r\n        const mail = rawData.val();\r\n\r\n        // change object to array\r\n        const labels = [];\r\n        if (mail.labels) {\r\n          mail.labels.forEach((label) =>\r\n            labels.push(label)\r\n          );\r\n        }\r\n\r\n        // change object to array\r\n        const tos = [];\r\n        mail.to.forEach((to) =>\r\n          tos.push(to)\r\n        );\r\n\r\n        mail.to = tos;\r\n        mail.labels = labels;\r\n        mails.push(mail);\r\n      });\r\n      return mails;\r\n    })\r\n    .catch(error => error);\r\n\r\n\r\nfunction* fetchMailRequest() {\r\n  try {\r\n    const fetchedMail = yield call(getMails);\r\n    yield put(fetchMailsSuccess(fetchedMail));\r\n  } catch (error) {\r\n    yield put(showMailMessage(error));\r\n  }\r\n}\r\n\r\n\r\nexport default function* rootSaga() {\r\n  yield all([takeEvery(FETCH_ALL_MAIL, fetchMailRequest)]);\r\n}"]},"metadata":{},"sourceType":"module"}