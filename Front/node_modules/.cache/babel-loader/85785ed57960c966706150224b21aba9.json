{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\src\\\\components\\\\CustomLineChart\\\\index.js\";\nimport React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\n\nvar CustomLineChart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CustomLineChart, _Component);\n\n  function CustomLineChart() {\n    _classCallCheck(this, CustomLineChart);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CustomLineChart).apply(this, arguments));\n  }\n\n  _createClass(CustomLineChart, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          labels = _this$props.labels,\n          label = _this$props.label,\n          borderColor = _this$props.borderColor,\n          chartData = _this$props.chartData,\n          pointBackgroundColor = _this$props.pointBackgroundColor,\n          height = _this$props.height,\n          pointBorderColor = _this$props.pointBorderColor,\n          borderWidth = _this$props.borderWidth,\n          shadowColor = _this$props.shadowColor,\n          pointBorderWidth = _this$props.pointBorderWidth,\n          lineTension = _this$props.lineTension,\n          pointRadius = _this$props.pointRadius,\n          pointHoverBorderColor = _this$props.pointHoverBorderColor,\n          gridLinesDisplay = _this$props.gridLinesDisplay,\n          gridLineWidth = _this$props.gridLineWidth;\n\n      var data = function data(canvas) {\n        var ctx = canvas.getContext(\"2d\");\n        var _stroke = ctx.stroke;\n\n        ctx.stroke = function () {\n          ctx.save();\n          ctx.shadowColor = shadowColor;\n          ctx.shadowBlur = 13;\n          ctx.shadowOffsetX = 0;\n          ctx.shadowOffsetY = 12;\n\n          _stroke.apply(this, arguments);\n\n          ctx.restore();\n        };\n\n        return {\n          labels: labels,\n          datasets: [{\n            label: label,\n            fill: false,\n            lineTension: lineTension,\n            fillOpacity: 0.3,\n            borderColor: borderColor,\n            borderWidth: borderWidth,\n            pointBorderColor: pointBorderColor,\n            pointBackgroundColor: pointBackgroundColor,\n            pointBorderWidth: pointBorderWidth,\n            pointRadius: pointRadius,\n            pointHoverBackgroundColor: pointBackgroundColor,\n            pointHoverBorderColor: pointHoverBorderColor,\n            pointHoverBorderWidth: 4,\n            pointHoverRadius: 6,\n            data: chartData\n          }]\n        };\n      }; // chart options\n\n\n      var options = {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            display: true,\n            ticks: {\n              display: false,\n              min: 0\n            },\n            gridLines: {\n              display: gridLinesDisplay,\n              drawBorder: false,\n              lineWidth: gridLineWidth\n            }\n          }],\n          yAxes: [{\n            display: false,\n            ticks: {\n              suggestedMin: 0,\n              beginAtZero: true\n            }\n          }]\n        },\n        layout: {\n          padding: {\n            left: -30,\n            right: 0,\n            top: 10,\n            bottom: -10\n          }\n        }\n      };\n      return React.createElement(Line, {\n        data: data,\n        options: options,\n        height: height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return CustomLineChart;\n}(Component);\n\nexport default CustomLineChart;","map":{"version":3,"sources":["C:\\Users\\Noelia\\Desktop\\compra\\source\\src\\components\\CustomLineChart\\index.js"],"names":["React","Component","Line","CustomLineChart","props","labels","label","borderColor","chartData","pointBackgroundColor","height","pointBorderColor","borderWidth","shadowColor","pointBorderWidth","lineTension","pointRadius","pointHoverBorderColor","gridLinesDisplay","gridLineWidth","data","canvas","ctx","getContext","_stroke","stroke","save","shadowBlur","shadowOffsetX","shadowOffsetY","apply","arguments","restore","datasets","fill","fillOpacity","pointHoverBackgroundColor","pointHoverBorderWidth","pointHoverRadius","options","maintainAspectRatio","legend","display","scales","xAxes","ticks","min","gridLines","drawBorder","lineWidth","yAxes","suggestedMin","beginAtZero","layout","padding","left","right","top","bottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\nclass CustomLineChart extends Component {\r\n  render() {\r\n    const {\r\n      labels,\r\n      label,\r\n      borderColor,\r\n      chartData,\r\n      pointBackgroundColor,\r\n      height,\r\n      pointBorderColor,\r\n      borderWidth,\r\n      shadowColor,\r\n      pointBorderWidth,\r\n      lineTension,\r\n      pointRadius,\r\n      pointHoverBorderColor,\r\n      gridLinesDisplay,\r\n      gridLineWidth\r\n    } = this.props;\r\n\r\n    const data = (canvas) => {\r\n      const ctx = canvas.getContext(\"2d\");\r\n      const _stroke = ctx.stroke;\r\n      ctx.stroke = function () {\r\n        ctx.save();\r\n        ctx.shadowColor = shadowColor;\r\n        ctx.shadowBlur = 13;\r\n        ctx.shadowOffsetX = 0;\r\n        ctx.shadowOffsetY = 12;\r\n        _stroke.apply(this, arguments);\r\n        ctx.restore();\r\n      };\r\n      return {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            label: label,\r\n            fill: false,\r\n            lineTension: lineTension,\r\n            fillOpacity: 0.3,\r\n            borderColor: borderColor,\r\n            borderWidth: borderWidth,\r\n            pointBorderColor: pointBorderColor,\r\n            pointBackgroundColor: pointBackgroundColor,\r\n            pointBorderWidth: pointBorderWidth,\r\n            pointRadius: pointRadius,\r\n            pointHoverBackgroundColor: pointBackgroundColor,\r\n            pointHoverBorderColor: pointHoverBorderColor,\r\n            pointHoverBorderWidth: 4,\r\n            pointHoverRadius: 6,\r\n            data: chartData,\r\n          }\r\n        ]\r\n      }\r\n    }\r\n    // chart options\r\n    const options = {\r\n      maintainAspectRatio : false,\r\n      legend: {\r\n        display: false\r\n      },\r\n      scales: {\r\n        xAxes: [{\r\n          display: true,\r\n          ticks: {\r\n            display: false,\r\n            min: 0\r\n          },\r\n          gridLines: {\r\n            display: gridLinesDisplay,\r\n            drawBorder: false,\r\n            lineWidth:gridLineWidth\r\n          }\r\n        }],\r\n        yAxes: [{\r\n          display: false,\r\n          ticks: {\r\n            suggestedMin: 0,\r\n            beginAtZero: true\r\n          }\r\n        }],\r\n\r\n      },\r\n      layout: {\r\n        padding: {\r\n          left:-30,\r\n          right:0,\r\n          top:10,\r\n          bottom:-10,\r\n        },\r\n      }\r\n    };\r\n    return (\r\n      <Line data={data} options={options} height={height}/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CustomLineChart;\r\n"]},"metadata":{},"sourceType":"module"}