{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\src\\\\app\\\\routes\\\\antojos\\\\index.js\";\n\n/*\r\nimport React from 'react';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport StepContent from '@material-ui/core/StepContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DatePickers from '../components/routes/date/DatePickers';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\n\r\n\r\nclass VerticalLinearStepper extends React.Component {\r\n  state = {\r\n    activeStep: 0,\r\n  };\r\n\r\n\r\n getSteps() {\r\n    return ['NameofCravings', 'TypeofCraving', 'DateofCraving', 'TimesofCraving', 'WhoGavetheWhim' ];\r\n  }\r\n\r\n  NameofCravings() {\r\n    return <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='NameofCravings'\r\n              id=\"NameofCravings\"\r\n              label=\"Name of Cravings\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div> \r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  TypeofCraving() {\r\n    return <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='TypeofCraving'\r\n              id=\"TypeofCraving\"\r\n              label=\"Type of Cravings\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div> \r\n      </div>\r\n    </div>    \r\n  }\r\n\r\n  DateofCraving() {\r\n    return <div>\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        <div className=\"form-group\">\r\n        <span>Fecha </span>\r\n          <DatePickers\r\n            onBlur={this.handleChange}\r\n            name='DateofCraving'\r\n          />\r\n        </div>\r\n      </div> \r\n    </div>\r\n  </div>   \r\n  }\r\n\r\n  TimesofCraving() {\r\n    return <div>\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        <div className=\"form-group\">\r\n          <TextField\r\n            onChange={this.handleChange}\r\n            name='TimesofCraving'\r\n            id=\"TimesofCraving\"\r\n            label=\"Times of Craving\"\r\n            margin=\"normal\"\r\n            fullWidth\r\n          />\r\n        </div>\r\n      </div> \r\n    </div>\r\n  </div>  \r\n  }\r\n\r\n\r\n  WhoGavetheWhim() {\r\n    return <div>\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        <div className=\"form-group\">\r\n          <TextField\r\n            onChange={this.handleChange}\r\n            name='WhoGavetheWhim'\r\n            id=\"WhoGavetheWhim\"\r\n            label=\"Who Gave the Whim\"\r\n            margin=\"normal\"\r\n            fullWidth\r\n          />\r\n        </div>\r\n      </div> \r\n    </div>\r\n  </div>  \r\n  }\r\n\r\n  getStepContent(step) {\r\n    switch (step) {\r\n      case 0:\r\n        return this.NameofCravings;\r\n      case 1:\r\n        return this.TypeofCraving;\r\n      case 2:\r\n        return this.DateofCraving;\r\n      case 3:\r\n        return this.TimesofCraving;\r\n      case 4:\r\n        return this.WhoGavetheWhim;\r\n      default:\r\n        return 'Unknown step';\r\n    }\r\n  }\r\n\r\n  handleNext = () => {\r\n    this.setState({\r\n      activeStep: this.state.activeStep + 1,\r\n    });\r\n  };\r\n\r\n  handleBack = () => {\r\n    this.setState({\r\n      activeStep: this.state.activeStep - 1,\r\n    });\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      activeStep: 0,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const steps = this.getSteps();\r\n    const {activeStep} = this.state;\r\n\r\n    return (\r\n      <div className=\"w-100\">\r\n        <Stepper activeStep={activeStep} orientation=\"vertical\">\r\n          {steps.map((label, index) => {\r\n            return (\r\n              <Step key={label}>\r\n                <StepLabel>{label}</StepLabel>\r\n              </Step>  \r\n                );\r\n          })}\r\n        </Stepper>\r\n        <div>\r\n          {this.state.activeStep === steps.length ? (\r\n            <div>\r\n              <Typography className=\"my-2\">\r\n                All steps completed - you&quot;re finished\r\n              </Typography>\r\n              <Button onClick={this.handleReset}>Reset</Button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              {this.getStepContent(activeStep)}\r\n              <div>\r\n                <Button\r\n                  disabled={activeStep === 0}\r\n                  onClick={this.handleBack}\r\n                  className=\"mr-2\"\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleNext}>\r\n                  {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VerticalLinearStepper;\r\n*/\nimport React from 'react';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport DatePickers from '../components/routes/date/DatePickers';\nimport TextField from '@material-ui/core/TextField';\n\nvar VerticalLinearStepper =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(VerticalLinearStepper, _React$Component);\n\n  function VerticalLinearStepper() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, VerticalLinearStepper);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(VerticalLinearStepper)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      activeStep: 0\n    };\n\n    _this.handleNext = function () {\n      _this.setState({\n        activeStep: _this.state.activeStep + 1\n      });\n    };\n\n    _this.handleBack = function () {\n      _this.setState({\n        activeStep: _this.state.activeStep - 1\n      });\n    };\n\n    _this.handleReset = function () {\n      _this.setState({\n        activeStep: 0\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(VerticalLinearStepper, [{\n    key: \"getSteps\",\n    value: function getSteps() {\n      return ['NameofCravings', 'TypeofCraving', 'DateofCraving', 'TimesofCraving', 'WhoGavetheWhim'];\n    }\n  }, {\n    key: \"NameofCravings\",\n    value: function NameofCravings() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        onChange: this.handleChange,\n        name: \"NameofCravings\",\n        id: \"NameofCravings\",\n        label: \"Name of Cravings\",\n        margin: \"normal\",\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"TypeofCraving\",\n    value: function TypeofCraving() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        onChange: this.handleChange,\n        name: \"TypeofCraving\",\n        id: \"TypeofCraving\",\n        label: \"Type of Cravings\",\n        margin: \"normal\",\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"DateofCraving\",\n    value: function DateofCraving() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, \"Fecha \"), React.createElement(DatePickers, {\n        onBlur: this.handleChange,\n        name: \"DateofCraving\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"TimesofCraving\",\n    value: function TimesofCraving() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        onChange: this.handleChange,\n        name: \"TimesofCraving\",\n        id: \"TimesofCraving\",\n        label: \"Times of Craving\",\n        margin: \"normal\",\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"WhoGavetheWhim\",\n    value: function WhoGavetheWhim() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        onChange: this.handleChange,\n        name: \"WhoGavetheWhim\",\n        id: \"WhoGavetheWhim\",\n        label: \"Who Gave the Whim\",\n        margin: \"normal\",\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"getStepContent\",\n    value: function getStepContent(step) {\n      switch (step) {\n        case 0:\n          return this.NameofCravings;\n\n        case 1:\n          return this.TypeofCraving;\n\n        case 2:\n          return this.DateofCraving;\n\n        case 3:\n          return this.TimesofCraving;\n\n        case 4:\n          return this.WhoGavetheWhim;\n\n        default:\n          return 'Unknown step';\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var steps = this.getSteps();\n      var activeStep = this.state.activeStep;\n      return (\n        /*\r\n        <div className=\"w-100\">\r\n          <Stepper activeStep={activeStep} orientation=\"vertical\">\r\n            {steps.map((label, index) => {\r\n              return (\r\n                <Step key={label}>\r\n                  <StepLabel>{label}</StepLabel>\r\n                </Step>  \r\n                  );\r\n            })}\r\n          </Stepper>\r\n          <div>\r\n            {this.state.activeStep === steps.length ? (\r\n              <div>\r\n                <Typography className=\"my-2\">\r\n                  All steps completed - you&quot;re finished\r\n                </Typography>\r\n                <Button onClick={this.handleReset}>Reset</Button>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                {this.getStepContent(activeStep)}\r\n                <div>\r\n                  <Button\r\n                    disabled={activeStep === 0}\r\n                    onClick={this.handleBack}\r\n                    className=\"mr-2\"\r\n                  >\r\n                    Back\r\n                  </Button>\r\n                  <Button variant=\"contained\" color=\"primary\" onClick={this.handleNext}>\r\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        */\n        React.createElement(\"div\", {\n          className: \"w-100\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 401\n          },\n          __self: this\n        }, React.createElement(Stepper, {\n          activeStep: activeStep,\n          alternativeLabel: true,\n          className: \"horizontal-stepper-linear\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 402\n          },\n          __self: this\n        }, steps.map(function (label, index) {\n          return React.createElement(Step, {\n            key: label,\n            className: \"horizontal-stepper \".concat(index === activeStep ? 'active' : ''),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 405\n            },\n            __self: this\n          }, React.createElement(StepLabel, {\n            className: \"stepperlabel\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 406\n            },\n            __self: this\n          }, label));\n        })), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 411\n          },\n          __self: this\n        }, this.state.activeStep === steps.length ? React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 413\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          className: \"my-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 414\n          },\n          __self: this\n        }, \"All steps completed - you\\\"re finished\"), React.createElement(Button, {\n          onClick: this.handleReset,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 417\n          },\n          __self: this\n        }, \"Reset\")) : React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 420\n          },\n          __self: this\n        }, this.getStepContent(activeStep), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 422\n          },\n          __self: this\n        }, React.createElement(Button, {\n          disabled: activeStep === 0,\n          onClick: this.handleBack,\n          className: \"mr-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 423\n          },\n          __self: this\n        }, \"Back\"), React.createElement(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.handleNext,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 430\n          },\n          __self: this\n        }, activeStep === steps.length - 1 ? 'Finish' : 'Next')))))\n      );\n    }\n  }]);\n\n  return VerticalLinearStepper;\n}(React.Component);\n\nexport default VerticalLinearStepper;","map":{"version":3,"sources":["C:\\Users\\Noelia\\Desktop\\Plantillas\\source\\src\\app\\routes\\antojos\\index.js"],"names":["React","Stepper","Step","StepLabel","StepContent","Button","Paper","Typography","DatePickers","TextField","VerticalLinearStepper","state","activeStep","handleNext","setState","handleBack","handleReset","handleChange","step","NameofCravings","TypeofCraving","DateofCraving","TimesofCraving","WhoGavetheWhim","steps","getSteps","map","label","index","length","getStepContent","Component"],"mappings":"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","sourcesContent":["\r\n/*\r\nimport React from 'react';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport StepContent from '@material-ui/core/StepContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DatePickers from '../components/routes/date/DatePickers';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\n\r\n\r\nclass VerticalLinearStepper extends React.Component {\r\n  state = {\r\n    activeStep: 0,\r\n  };\r\n\r\n\r\n getSteps() {\r\n    return ['NameofCravings', 'TypeofCraving', 'DateofCraving', 'TimesofCraving', 'WhoGavetheWhim' ];\r\n  }\r\n\r\n  NameofCravings() {\r\n    return <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='NameofCravings'\r\n              id=\"NameofCravings\"\r\n              label=\"Name of Cravings\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div> \r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  TypeofCraving() {\r\n    return <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='TypeofCraving'\r\n              id=\"TypeofCraving\"\r\n              label=\"Type of Cravings\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div> \r\n      </div>\r\n    </div>    \r\n  }\r\n\r\n  DateofCraving() {\r\n    return <div>\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        <div className=\"form-group\">\r\n        <span>Fecha </span>\r\n          <DatePickers\r\n            onBlur={this.handleChange}\r\n            name='DateofCraving'\r\n          />\r\n        </div>\r\n      </div> \r\n    </div>\r\n  </div>   \r\n  }\r\n\r\n  TimesofCraving() {\r\n    return <div>\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        <div className=\"form-group\">\r\n          <TextField\r\n            onChange={this.handleChange}\r\n            name='TimesofCraving'\r\n            id=\"TimesofCraving\"\r\n            label=\"Times of Craving\"\r\n            margin=\"normal\"\r\n            fullWidth\r\n          />\r\n        </div>\r\n      </div> \r\n    </div>\r\n  </div>  \r\n  }\r\n\r\n\r\n  WhoGavetheWhim() {\r\n    return <div>\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        <div className=\"form-group\">\r\n          <TextField\r\n            onChange={this.handleChange}\r\n            name='WhoGavetheWhim'\r\n            id=\"WhoGavetheWhim\"\r\n            label=\"Who Gave the Whim\"\r\n            margin=\"normal\"\r\n            fullWidth\r\n          />\r\n        </div>\r\n      </div> \r\n    </div>\r\n  </div>  \r\n  }\r\n\r\n  getStepContent(step) {\r\n    switch (step) {\r\n      case 0:\r\n        return this.NameofCravings;\r\n      case 1:\r\n        return this.TypeofCraving;\r\n      case 2:\r\n        return this.DateofCraving;\r\n      case 3:\r\n        return this.TimesofCraving;\r\n      case 4:\r\n        return this.WhoGavetheWhim;\r\n      default:\r\n        return 'Unknown step';\r\n    }\r\n  }\r\n\r\n  handleNext = () => {\r\n    this.setState({\r\n      activeStep: this.state.activeStep + 1,\r\n    });\r\n  };\r\n\r\n  handleBack = () => {\r\n    this.setState({\r\n      activeStep: this.state.activeStep - 1,\r\n    });\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      activeStep: 0,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const steps = this.getSteps();\r\n    const {activeStep} = this.state;\r\n\r\n    return (\r\n      <div className=\"w-100\">\r\n        <Stepper activeStep={activeStep} orientation=\"vertical\">\r\n          {steps.map((label, index) => {\r\n            return (\r\n              <Step key={label}>\r\n                <StepLabel>{label}</StepLabel>\r\n              </Step>  \r\n                );\r\n          })}\r\n        </Stepper>\r\n        <div>\r\n          {this.state.activeStep === steps.length ? (\r\n            <div>\r\n              <Typography className=\"my-2\">\r\n                All steps completed - you&quot;re finished\r\n              </Typography>\r\n              <Button onClick={this.handleReset}>Reset</Button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              {this.getStepContent(activeStep)}\r\n              <div>\r\n                <Button\r\n                  disabled={activeStep === 0}\r\n                  onClick={this.handleBack}\r\n                  className=\"mr-2\"\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleNext}>\r\n                  {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VerticalLinearStepper;\r\n*/\r\n\r\nimport React from 'react';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport StepContent from '@material-ui/core/StepContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DatePickers from '../components/routes/date/DatePickers';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\n\r\n\r\nclass VerticalLinearStepper extends React.Component {\r\n  state = {\r\n    activeStep: 0,\r\n  };\r\n\r\n\r\n getSteps() {\r\n    return ['NameofCravings', 'TypeofCraving', 'DateofCraving', 'TimesofCraving', 'WhoGavetheWhim' ];\r\n  }\r\n\r\n  NameofCravings() {\r\n    return <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='NameofCravings'\r\n              id=\"NameofCravings\"\r\n              label=\"Name of Cravings\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div> \r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  TypeofCraving() {\r\n    return <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <TextField\r\n              onChange={this.handleChange}\r\n              name='TypeofCraving'\r\n              id=\"TypeofCraving\"\r\n              label=\"Type of Cravings\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div> \r\n      </div>\r\n    </div>    \r\n  }\r\n\r\n  DateofCraving() {\r\n    return <div>\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        <div className=\"form-group\">\r\n        <span>Fecha </span>\r\n          <DatePickers\r\n            onBlur={this.handleChange}\r\n            name='DateofCraving'\r\n          />\r\n        </div>\r\n      </div> \r\n    </div>\r\n  </div>   \r\n  }\r\n\r\n  TimesofCraving() {\r\n    return <div>\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        <div className=\"form-group\">\r\n          <TextField\r\n            onChange={this.handleChange}\r\n            name='TimesofCraving'\r\n            id=\"TimesofCraving\"\r\n            label=\"Times of Craving\"\r\n            margin=\"normal\"\r\n            fullWidth\r\n          />\r\n        </div>\r\n      </div> \r\n    </div>\r\n  </div>  \r\n  }\r\n\r\n\r\n  WhoGavetheWhim() {\r\n    return <div>\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        <div className=\"form-group\">\r\n          <TextField\r\n            onChange={this.handleChange}\r\n            name='WhoGavetheWhim'\r\n            id=\"WhoGavetheWhim\"\r\n            label=\"Who Gave the Whim\"\r\n            margin=\"normal\"\r\n            fullWidth\r\n          />\r\n        </div>\r\n      </div> \r\n    </div>\r\n  </div>  \r\n  }\r\n\r\n  getStepContent(step) {\r\n    switch (step) {\r\n      case 0:\r\n        return this.NameofCravings;\r\n      case 1:\r\n        return this.TypeofCraving;\r\n      case 2:\r\n        return this.DateofCraving;\r\n      case 3:\r\n        return this.TimesofCraving;\r\n      case 4:\r\n        return this.WhoGavetheWhim;\r\n      default:\r\n        return 'Unknown step';\r\n    }\r\n  }\r\n\r\n  handleNext = () => {\r\n    this.setState({\r\n      activeStep: this.state.activeStep + 1,\r\n    });\r\n  };\r\n\r\n  handleBack = () => {\r\n    this.setState({\r\n      activeStep: this.state.activeStep - 1,\r\n    });\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      activeStep: 0,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const steps = this.getSteps();\r\n    const {activeStep} = this.state;\r\n\r\n    return (\r\n      /*\r\n      <div className=\"w-100\">\r\n        <Stepper activeStep={activeStep} orientation=\"vertical\">\r\n          {steps.map((label, index) => {\r\n            return (\r\n              <Step key={label}>\r\n                <StepLabel>{label}</StepLabel>\r\n              </Step>  \r\n                );\r\n          })}\r\n        </Stepper>\r\n        <div>\r\n          {this.state.activeStep === steps.length ? (\r\n            <div>\r\n              <Typography className=\"my-2\">\r\n                All steps completed - you&quot;re finished\r\n              </Typography>\r\n              <Button onClick={this.handleReset}>Reset</Button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              {this.getStepContent(activeStep)}\r\n              <div>\r\n                <Button\r\n                  disabled={activeStep === 0}\r\n                  onClick={this.handleBack}\r\n                  className=\"mr-2\"\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleNext}>\r\n                  {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n     */ \r\n\r\n    <div className=\"w-100\">\r\n    <Stepper activeStep={activeStep} alternativeLabel className=\"horizontal-stepper-linear\">\r\n      {steps.map((label, index) => {\r\n        return (\r\n          <Step key={label} className={`horizontal-stepper ${index === activeStep ? 'active' : ''}`}>\r\n            <StepLabel className=\"stepperlabel\">{label}</StepLabel>\r\n          </Step>\r\n        );\r\n      })}\r\n    </Stepper>\r\n    <div>\r\n      {this.state.activeStep === steps.length ? (\r\n        <div>\r\n          <Typography className=\"my-2\">\r\n            All steps completed - you&quot;re finished\r\n          </Typography>\r\n          <Button onClick={this.handleReset}>Reset</Button>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          {this.getStepContent(activeStep)}\r\n          <div>\r\n            <Button\r\n              disabled={activeStep === 0}\r\n              onClick={this.handleBack}\r\n              className=\"mr-2\"\r\n            >\r\n              Back\r\n            </Button>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={this.handleNext}>\r\n              {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  </div>\r\n    );\r\n    \r\n  }\r\n}\r\n\r\nexport default VerticalLinearStepper;"]},"metadata":{},"sourceType":"module"}