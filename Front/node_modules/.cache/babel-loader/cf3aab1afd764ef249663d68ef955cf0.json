{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\Plantillas\\\\source\\\\src\\\\app\\\\routes\\\\imagenes\\\\funcionalidadImagenes.js\";\nimport React, { Component } from 'react';\nimport Spinner from './Spinner';\nimport Notifications, { notify } from 'react-notify-toast';\nimport Images from './Images';\nimport Buttons from './Button';\nimport './imagenes.css';\nvar API_URL = '';\nvar toastColor = {\n  background: '#505050',\n  text: '#fff'\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loading: true,\n      uploading: false,\n      images: []\n    };\n    _this.toast = notify.createShowQueue();\n\n    _this.onChange = function (e) {\n      var errs = [];\n      var files = Array.from(e.target.files);\n      console.log('onChange, nene malo jum juuummm', onChange);\n\n      if (files.length > 3) {\n        var msg = 'Only 3 images can be uploaded at a time';\n        return _this.toast(msg, 'custom', 2000, toastColor);\n      }\n\n      var formData = new FormData();\n      var types = ['image/png', 'image/jpeg', 'image/gif'];\n      files.forEach(function (file, i) {\n        if (types.every(function (type) {\n          return file.type !== type;\n        })) {\n          errs.push(\"'\".concat(file.type, \"' is not a supported format\"));\n        }\n\n        if (file.size > 150000) {\n          errs.push(\"'\".concat(file.name, \"' is too large, please pick a smaller file\"));\n        }\n\n        formData.append(i, file);\n      });\n\n      if (errs.length) {\n        return errs.forEach(function (err) {\n          return _this.toast(err, 'custom', 2000, toastColor);\n        });\n      }\n\n      _this.setState({\n        uploading: true\n      });\n\n      fetch(\"\".concat(API_URL, \"/image-upload\"), {\n        method: 'POST',\n        body: formData\n      }).then(function (res) {\n        if (!res.ok) {\n          throw res;\n        }\n\n        return res.json();\n      }).then(function (images) {\n        _this.setState({\n          uploading: false,\n          images: images\n        });\n      }).catch(function (err) {\n        err.json().then(function (e) {\n          _this.toast(e.message, 'custom', 2000, toastColor);\n\n          _this.setState({\n            uploading: false\n          });\n        });\n      });\n    };\n\n    _this.filter = function (id) {\n      return _this.state.images.filter(function (image) {\n        return image.public_id !== id;\n      });\n    };\n\n    _this.removeImage = function (id) {\n      _this.setState({\n        images: _this.filter(id)\n      });\n    };\n\n    _this.onError = function (id) {\n      _this.toast('Oops, something went wrong', 'custom', 2000, toastColor);\n\n      _this.setState({\n        images: _this.filter(id)\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"\".concat(API_URL, \"/wake-up\")).then(function (res) {\n        if (res.ok) {\n          return _this2.setState({\n            loading: false\n          });\n        }\n\n        var msg = 'Something is went wrong with Heroku';\n\n        _this2.toast(msg, 'custom', 2000, toastColor);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          loading = _this$state.loading,\n          uploading = _this$state.uploading,\n          images = _this$state.images;\n\n      var content = function content() {\n        switch (true) {\n          case uploading:\n            return React.createElement(Spinner, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 110\n              },\n              __self: this\n            });\n\n          case images.length > 0:\n            return React.createElement(Images, {\n              images: images,\n              removeImage: _this3.removeImage,\n              onError: _this3.onError,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 112\n              },\n              __self: this\n            });\n\n          default:\n            return React.createElement(Buttons, {\n              onChange: _this3.onChange,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 118\n              },\n              __self: this\n            });\n        }\n      };\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Notifications, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, content()));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["C:\\Users\\Noelia\\Desktop\\Plantillas\\source\\src\\app\\routes\\imagenes\\funcionalidadImagenes.js"],"names":["React","Component","Spinner","Notifications","notify","Images","Buttons","API_URL","toastColor","background","text","App","state","loading","uploading","images","toast","createShowQueue","onChange","e","errs","files","Array","from","target","console","log","length","msg","formData","FormData","types","forEach","file","i","every","type","push","size","name","append","err","setState","fetch","method","body","then","res","ok","json","catch","message","filter","id","image","public_id","removeImage","onError","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Spinner from './Spinner'\r\nimport Notifications, { notify } from 'react-notify-toast'\r\nimport Images from './Images'\r\nimport Buttons from './Button'\r\nimport './imagenes.css'\r\n\r\n\r\nconst API_URL = '';\r\nconst toastColor = { \r\n  background: '#505050', \r\n  text: '#fff' \r\n}\r\n\r\nexport default class App extends Component {\r\n  \r\n  state = {\r\n    loading: true,\r\n    uploading: false,\r\n    images: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`${API_URL}/wake-up`)\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return this.setState({ loading: false })  \r\n        }\r\n        const msg = 'Something is went wrong with Heroku' \r\n        this.toast(msg, 'custom', 2000, toastColor)\r\n      })\r\n  }\r\n\r\n  toast = notify.createShowQueue()\r\n\r\n  onChange = e => {\r\n    const errs = [] \r\n    const files = Array.from(e.target.files)\r\n    console.log('onChange, nene malo jum juuummm',onChange);\r\n    if (files.length > 3) {\r\n      const msg = 'Only 3 images can be uploaded at a time'\r\n      return this.toast(msg, 'custom', 2000, toastColor)  \r\n    }\r\n\r\n    const formData = new FormData()\r\n    const types = ['image/png', 'image/jpeg', 'image/gif']\r\n\r\n    files.forEach((file, i) => {\r\n\r\n      if (types.every(type => file.type !== type)) {\r\n        errs.push(`'${file.type}' is not a supported format`)\r\n      }\r\n\r\n      if (file.size > 150000) {\r\n        errs.push(`'${file.name}' is too large, please pick a smaller file`)\r\n      }\r\n\r\n      formData.append(i, file)\r\n    })\r\n\r\n    if (errs.length) {\r\n      return errs.forEach(err => this.toast(err, 'custom', 2000, toastColor))\r\n    }\r\n\r\n    this.setState({ uploading: true })\r\n\r\n    fetch(`${API_URL}/image-upload`, {\r\n      method: 'POST',\r\n      body: formData\r\n    })\r\n    .then(res => {\r\n      if (!res.ok) {\r\n        throw res\r\n      }\r\n      return res.json()\r\n    })\r\n    .then(images => {\r\n      this.setState({\r\n        uploading: false, \r\n        images\r\n      })\r\n    })\r\n    .catch(err => {\r\n      err.json().then(e => {\r\n        this.toast(e.message, 'custom', 2000, toastColor)\r\n        this.setState({ uploading: false })\r\n      })\r\n    })\r\n  }\r\n\r\n  filter = id => {\r\n    return this.state.images.filter(image => image.public_id !== id)\r\n  }\r\n\r\n  removeImage = id => {\r\n    this.setState({ images: this.filter(id) })\r\n  }\r\n\r\n  onError = id => {\r\n    this.toast('Oops, something went wrong', 'custom', 2000, toastColor)\r\n    this.setState({ images: this.filter(id) })\r\n  }\r\n  \r\n  render() {\r\n    const { loading, uploading, images } = this.state\r\n    \r\n    const content = () => {\r\n      switch(true) {\r\n        case uploading:\r\n          return <Spinner />\r\n        case images.length > 0:\r\n          return <Images \r\n                  images={images} \r\n                  removeImage={this.removeImage} \r\n                  onError={this.onError}\r\n                 />\r\n        default:\r\n          return <Buttons onChange={this.onChange} />\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className='container'>\r\n        <Notifications />\r\n        <div className='buttons'>\r\n          {content()}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}