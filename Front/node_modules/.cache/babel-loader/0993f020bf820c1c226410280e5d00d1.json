{"ast":null,"code":"/**\r\n * 3D slice module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Slice } from \"../Slice\";\nimport { Sprite } from \"../../Sprite\";\nimport { Container } from \"../../Container\";\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\nimport * as $math from \"../../utils/Math\";\nimport * as $path from \"../../rendering/Path\";\nimport * as $type from \"../../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to draw a 3D slice of a Pie chart.\r\n *\r\n * @see {@link ISlice3DEvents} for a list of available events\r\n * @see {@link ISlice3DAdapters} for a list of available Adapters\r\n */\n\nvar Slice3D =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Slice3D, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Slice3D() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"Slice3D\";\n    _this.layout = \"none\"; // Create edge container\n\n    var edge = _this.createChild(Container);\n\n    _this.edge = edge;\n    edge.shouldClone = false;\n    edge.isMeasured = false;\n    var lightenFilter = new LightenFilter();\n    lightenFilter.lightness = -0.25;\n    edge.filters.push(lightenFilter);\n    edge.toBack(); //edge.strokeOpacity = 0;\n\n    _this._disposers.push(edge); // Set defaults\n\n\n    _this.angle = 30;\n    _this.depth = 20; // Create side A element\n\n    var sideA = _this.createChild(Sprite);\n\n    _this.sideA = sideA;\n    sideA.shouldClone = false;\n    sideA.isMeasured = false;\n    sideA.setElement(_this.paper.add(\"path\"));\n    var lightenFilterA = new LightenFilter();\n    lightenFilterA.lightness = -0.25;\n    sideA.filters.push(lightenFilterA); //sideA.strokeOpacity = 0;\n\n    _this._disposers.push(sideA); // Crate side B element\n\n\n    var sideB = _this.createChild(Sprite);\n\n    _this.sideB = sideB;\n    sideB.shouldClone = false;\n    sideB.isMeasured = false;\n    sideB.setElement(_this.paper.add(\"path\"));\n    var lightenFilterB = new LightenFilter();\n    lightenFilterB.lightness = -0.25;\n    sideB.filters.push(lightenFilterB);\n\n    _this._disposers.push(sideB); //sideB.strokeOpacity = 0;\n    // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Slice3D.prototype.draw = function () {\n    _super.prototype.draw.call(this); // this should go here to hide 3d slices if arc = 0\n\n\n    for (var i = 0, len = this.edge.children.length; i < len; i++) {\n      var slice = this.edge.children.getIndex(i);\n\n      if (slice instanceof Slice) {\n        slice.radiusY = this.radiusY;\n        slice.radius = this.radius;\n        slice.fill = this.fill;\n        slice.startAngle = this.startAngle;\n        slice.arc = this.arc;\n        slice.cornerRadius = this.cornerRadius;\n        slice.innerRadius = this.innerRadius;\n        slice.strokeOpacity = 0;\n      }\n    }\n\n    if (this.arc !== 0 && this.radius > 0 && this.depth > 0) {\n      this.sideB.show(0);\n      this.sideA.show(0);\n      this.edge.show(0);\n      var startAngle = this.startAngle;\n      var arc = this.arc;\n      var innerRadius = this.pixelInnerRadius || 0;\n      var radiusY = this.radiusY || 0;\n      var cornerRadius = this.cornerRadius || 0;\n      var innerCornerRadius = this.innerCornerRadius;\n      var radius = this.radius; // this is code duplicate with $path.arc. @todo to think how to avoid it\n\n      var endAngle = startAngle + arc;\n      var crSin = $math.sin($math.min(arc, 45) / 2);\n      innerCornerRadius = innerCornerRadius || cornerRadius;\n      var innerRadiusY = radiusY / radius * innerRadius;\n      var cornerRadiusY = radiusY / radius * cornerRadius;\n      var innerCornerRadiusY = radiusY / radius * innerCornerRadius;\n      cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\n      cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\n      innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\n      innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\n      cornerRadius = $math.fitToRange(cornerRadius, 0, radius * crSin);\n      cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, radiusY * crSin);\n      innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, innerRadius * crSin);\n      innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin); //let crAngle: number = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\n      //let crAngleY: number = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\n\n      if (innerRadius < innerCornerRadius) {\n        innerRadius = innerCornerRadius;\n      }\n\n      if (innerRadiusY < innerCornerRadiusY) {\n        innerRadiusY = innerCornerRadiusY;\n      }\n\n      var crInnerAngle = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\n      var crInnerAngleY = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\n\n      if (!$type.isNumber(crInnerAngle)) {\n        crInnerAngle = 0;\n      }\n\n      if (!$type.isNumber(crInnerAngleY)) {\n        crInnerAngleY = 0;\n      } //let middleAngle = startAngle + arc / 2;\n      //let mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.round($math.sin(middleAngle) * innerRadiusY, 4) };\n\n\n      var a0 = {\n        x: $math.round($math.cos(startAngle) * (innerRadius + innerCornerRadius), 4),\n        y: $math.round($math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY), 4)\n      };\n      var b0 = {\n        x: $math.round($math.cos(startAngle) * (radius - cornerRadius), 4),\n        y: $math.round($math.sin(startAngle) * (radiusY - cornerRadiusY), 4)\n      };\n      var c0 = {\n        x: $math.round($math.cos(endAngle) * (radius - cornerRadius), 4),\n        y: $math.round($math.sin(endAngle) * (radiusY - cornerRadiusY), 4)\n      };\n      var d0 = {\n        x: $math.round($math.cos(endAngle) * (innerRadius + innerCornerRadius), 4),\n        y: $math.round($math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY), 4)\n      }; // end of duplicate\n\n      var h = this.depth;\n      var ah = {\n        x: a0.x,\n        y: a0.y - h\n      };\n      var bh = {\n        x: b0.x,\n        y: b0.y - h\n      };\n      var ch = {\n        x: c0.x,\n        y: c0.y - h\n      };\n      var dh = {\n        x: d0.x,\n        y: d0.y - h\n      };\n      this.sideA.path = $path.moveTo(a0) + $path.lineTo(b0) + $path.lineTo(bh) + $path.lineTo(ah) + $path.closePath();\n      this.sideB.path = $path.moveTo(c0) + $path.lineTo(d0) + $path.lineTo(dh) + $path.lineTo(ch) + $path.closePath();\n\n      if (this.startAngle < 90) {\n        this.sideA.toBack();\n      } else {\n        this.sideA.toFront();\n      }\n\n      if (this.startAngle + this.arc > 90) {\n        this.sideB.toBack();\n      } else {\n        this.sideB.toFront();\n      }\n    } else {\n      this.sideA.hide(0);\n      this.sideB.hide(0);\n      this.edge.hide(0);\n    }\n  };\n\n  Object.defineProperty(Slice3D.prototype, \"depth\", {\n    /**\r\n     * @return Depth (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"depth\");\n    },\n\n    /**\r\n     * Depth (height) of the 3D slice in pixels.\r\n     *\r\n     * @default 20\r\n     * @param depth  Depth (px)\r\n     */\n    set: function set(depth) {\n      if (this.setPropertyValue(\"depth\", depth, true)) {\n        this.edge.removeChildren();\n        var d = 3;\n\n        if (depth > 0) {\n          var count = Math.ceil(this.depth / d);\n          var step = depth / count;\n\n          for (var i = 0; i <= count; i++) {\n            var slice = this.edge.createChild(Slice);\n            slice.isMeasured = false;\n            slice.y = -step * i;\n          }\n        }\n\n        this.slice.dy = -this.depth;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice3D.prototype, \"angle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function get() {\n      var angle = this.getPropertyValue(\"angle\");\n\n      if (!$type.isNumber(angle)) {\n        angle = 0;\n      }\n\n      return angle;\n    },\n\n    /**\r\n     * Angle of the point of view to the 3D element. (0-360)\r\n     *\r\n     * @default 30\r\n     * @param value  Angle\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"angle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice3D.prototype, \"radiusY\", {\n    /**\r\n     * @return Vertical radius (0-1)\r\n     */\n    get: function get() {\n      var radiusY = this.getPropertyValue(\"radiusY\");\n\n      if (!$type.isNumber(radiusY)) {\n        radiusY = this.radius - this.radius * this.angle / 90;\n      }\n\n      return radiusY;\n    },\n\n    /**\r\n     * Vertical radius for creating skewed slices.\r\n     *\r\n     * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n     * the `radius`.\r\n     *\r\n     * @param value Vertical radius (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"radiusY\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related data from a different instance of Axis.\r\n   *\r\n   * @param source Source Axis\r\n   */\n\n  Slice3D.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.edge.copyFrom(source.edge);\n    this.sideA.copyFrom(source.sideA);\n    this.sideB.copyFrom(source.sideB);\n  };\n\n  return Slice3D;\n}(Slice);\n\nexport { Slice3D };","map":null,"metadata":{},"sourceType":"module"}