{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\src\\\\components\\\\dashboard\\\\eCommerce\\\\YearlyProfitChart.js\";\nimport React, { Component } from 'react';\nimport { Chart, Doughnut } from 'react-chartjs-2';\nimport '../../../app/routes/dashboard/routes/Misc/test.css';\n\nvar YearlyProfitChart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(YearlyProfitChart, _Component);\n\n  function YearlyProfitChart() {\n    _classCallCheck(this, YearlyProfitChart);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(YearlyProfitChart).apply(this, arguments));\n  }\n\n  _createClass(YearlyProfitChart, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          shadowColor = _this$props.shadowColor,\n          centerText = _this$props.centerText,\n          textColor = _this$props.textColor,\n          height = _this$props.height,\n          backgroundColor = _this$props.backgroundColor,\n          borderColor = _this$props.borderColor,\n          hoverBorderColor = _this$props.hoverBorderColor,\n          hoverBorderWidth = _this$props.hoverBorderWidth,\n          rotation = _this$props.rotation,\n          chartType = _this$props.chartType;\n\n      var data = function data(canvas) {\n        var ctx = canvas.getContext(\"2d\");\n        var _stroke = ctx.stroke;\n\n        ctx.stroke = function () {\n          ctx.save();\n          ctx.shadowColor = shadowColor;\n          ctx.shadowBlur = 20;\n          ctx.shadowOffsetX = 0;\n          ctx.shadowOffsetY = 10;\n\n          _stroke.apply(this, arguments);\n\n          ctx.restore();\n        };\n\n        Chart.pluginService.register({\n          beforeDraw: function beforeDraw(chart) {\n            if (chart.options.chartType === chartType) {\n              var width = chart.chart.width,\n                  _height = chart.chart.height,\n                  _ctx = chart.chart.ctx;\n\n              _ctx.restore();\n\n              var fontSize = \"1.4\";\n              _ctx.font = fontSize + \"em sans-serif\";\n              _ctx.fillStyle = textColor;\n              _ctx.textBaseline = \"middle\";\n              var text = centerText,\n                  textX = Math.round((width - _ctx.measureText(text).width) / 2),\n                  textY = _height / 2;\n\n              _ctx.fillText(text, textX, textY);\n\n              _ctx.save();\n            }\n          }\n        });\n        return {\n          labels: ['red', 'sky'],\n          datasets: [{\n            data: [100, 300],\n            backgroundColor: backgroundColor,\n            borderColor: borderColor,\n            hoverBorderColor: hoverBorderColor,\n            hoverBorderWidth: hoverBorderWidth\n          }]\n        };\n      };\n\n      var options = {\n        maintainAspectRatio: false,\n        chartType: chartType,\n        legend: {\n          display: false,\n          labels: {\n            fontColor: '#AAAEB3'\n          }\n        },\n        layout: {\n          padding: {\n            top: 5,\n            bottom: 5,\n            right: 0,\n            left: 0\n          }\n        },\n        cutoutPercentage: 75,\n        borderWidth: 0,\n        rotation: -0.5 * Math.PI - 25 / rotation * Math.PI\n      };\n      return React.createElement(Doughnut, {\n        data: data,\n        options: options,\n        height: height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return YearlyProfitChart;\n}(Component);\n\nexport default YearlyProfitChart;","map":{"version":3,"sources":["C:\\Users\\Noelia\\Desktop\\compra\\source\\src\\components\\dashboard\\eCommerce\\YearlyProfitChart.js"],"names":["React","Component","Chart","Doughnut","YearlyProfitChart","props","shadowColor","centerText","textColor","height","backgroundColor","borderColor","hoverBorderColor","hoverBorderWidth","rotation","chartType","data","canvas","ctx","getContext","_stroke","stroke","save","shadowBlur","shadowOffsetX","shadowOffsetY","apply","arguments","restore","pluginService","register","beforeDraw","chart","options","width","fontSize","font","fillStyle","textBaseline","text","textX","Math","round","measureText","textY","fillText","labels","datasets","maintainAspectRatio","legend","display","fontColor","layout","padding","top","bottom","right","left","cutoutPercentage","borderWidth","PI"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Chart,Doughnut} from 'react-chartjs-2';\r\nimport '../../../app/routes/dashboard/routes/Misc/test.css'\r\n\r\nclass YearlyProfitChart extends Component {\r\n\r\n  render() {\r\n\r\n    const {\r\n      shadowColor,\r\n      centerText,\r\n      textColor,\r\n      height,\r\n      backgroundColor,\r\n      borderColor,\r\n      hoverBorderColor,\r\n      hoverBorderWidth,\r\n      rotation,\r\n      chartType\r\n    } = this.props;\r\n\r\n    const data = (canvas) => {\r\n      const ctx = canvas.getContext(\"2d\");\r\n      const _stroke = ctx.stroke;\r\n      ctx.stroke = function () {\r\n        ctx.save();\r\n        ctx.shadowColor = shadowColor;\r\n        ctx.shadowBlur = 20;\r\n        ctx.shadowOffsetX = 0;\r\n        ctx.shadowOffsetY = 10;\r\n        _stroke.apply(this, arguments);\r\n        ctx.restore();\r\n      };\r\n\r\n      Chart.pluginService.register({\r\n\r\n        beforeDraw: function(chart) {\r\n          if (chart.options.chartType === chartType) {\r\n            let width = chart.chart.width,\r\n              height = chart.chart.height,\r\n              ctx = chart.chart.ctx;\r\n\r\n            ctx.restore();\r\n            let fontSize = \"1.4\";\r\n            ctx.font = fontSize + \"em sans-serif\";\r\n            ctx.fillStyle = textColor;\r\n            ctx.textBaseline = \"middle\";\r\n\r\n            let text = centerText,\r\n              textX = Math.round((width - ctx.measureText(text).width) / 2),\r\n              textY = height / 2;\r\n            ctx.fillText(text, textX, textY);\r\n            ctx.save();\r\n          }\r\n        }\r\n      });\r\n\r\n      return {\r\n        labels: [\r\n          'red',\r\n          'sky',\r\n        ],\r\n        datasets: [{\r\n          data: [100, 300],\r\n          backgroundColor: backgroundColor,\r\n          borderColor: borderColor,\r\n          hoverBorderColor: hoverBorderColor,\r\n          hoverBorderWidth:hoverBorderWidth\r\n        }],\r\n      }\r\n    }\r\n\r\n\r\n    const options = {\r\n      maintainAspectRatio : false,\r\n      chartType: chartType,\r\n      legend: {\r\n        display: false,\r\n        labels: {\r\n          fontColor: '#AAAEB3'\r\n        }\r\n      },\r\n      layout: {\r\n        padding: {\r\n          top:5,\r\n          bottom: 5,\r\n          right: 0,\r\n          left: 0,\r\n        }\r\n      },\r\n      cutoutPercentage: 75,\r\n      borderWidth: 0,\r\n      rotation: (-0.5 * Math.PI) - (25/rotation * Math.PI)\r\n    };\r\n    return (\r\n      <Doughnut data={data} options={options} height={height}/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default YearlyProfitChart;"]},"metadata":{},"sourceType":"module"}