{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Noelia\\\\Desktop\\\\compra\\\\source\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport Moment from 'moment';\nimport users from 'app/routes/chatPanel/data/chatUsers';\nimport conversationList from 'app/routes/chatPanel/data/conversationList';\nimport { FETCH_ALL_CHAT_USER_CONVERSATION_SUCCESS, FETCH_ALL_CHAT_USER_SUCCESS, FILTER_CONTACT, FILTER_USERS, ON_HIDE_LOADER, ON_SELECT_USER, ON_TOGGLE_DRAWER, SHOW_MESSAGE, SUBMIT_COMMENT, UPDATE_MESSAGE_VALUE, UPDATE_SEARCH_CHAT_USER } from 'constants/ActionTypes';\nimport { USER_INFO_STATE } from '../constants/ActionTypes';\nvar INIT_STATE = {\n  loader: true,\n  userNotFound: 'No user found',\n  drawerState: false,\n  selectedSectionId: '',\n  userState: 1,\n  searchChatUser: '',\n  // contactList: [], onlt for production\n  contactList: users.filter(function (user) {\n    return !user.recent;\n  }),\n  selectedUser: null,\n  message: '',\n  // chatUsers: [],\n  // conversationList: [], //ony for prod\n  chatUsers: users.filter(function (user) {\n    return user.recent;\n  }),\n  conversationList: conversationList,\n  conversation: null\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INIT_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FILTER_CONTACT:\n      {\n        if (action.payload === '') {\n          return _objectSpread({}, state, {\n            contactList: users.filter(function (user) {\n              return !user.recent;\n            })\n          });\n        } else {\n          return _objectSpread({}, state, {\n            contactList: users.filter(function (user) {\n              return !user.recent && user.name.toLowerCase().indexOf(action.payload.toLowerCase()) > -1;\n            })\n          });\n        }\n      }\n\n    case FILTER_USERS:\n      {\n        if (action.payload === '') {\n          return _objectSpread({}, state, {\n            chatUsers: users.filter(function (user) {\n              return !user.recent;\n            })\n          });\n        } else {\n          return _objectSpread({}, state, {\n            chatUsers: users.filter(function (user) {\n              return !user.recent && user.name.toLowerCase().indexOf(action.payload.toLowerCase()) > -1;\n            })\n          });\n        }\n      }\n\n    case ON_SELECT_USER:\n      {\n        return _objectSpread({}, state, {\n          loader: true,\n          drawerState: false,\n          selectedSectionId: action.payload.id,\n          selectedUser: action.payload,\n          conversation: state.conversationList.find(function (data) {\n            return data.id === action.payload.id;\n          })\n        });\n      }\n\n    case ON_TOGGLE_DRAWER:\n      {\n        return _objectSpread({}, state, {\n          drawerState: !state.drawerState\n        });\n      }\n\n    case ON_HIDE_LOADER:\n      {\n        return _objectSpread({}, state, {\n          loader: false\n        });\n      }\n\n    case USER_INFO_STATE:\n      {\n        return _objectSpread({}, state, {\n          userState: action.payload\n        });\n      }\n\n    case SUBMIT_COMMENT:\n      {\n        var updatedConversation = state.conversation.conversationData.concat({\n          'type': 'sent',\n          'message': state.message,\n          'sentAt': Moment().format('hh:mm:ss A')\n        });\n        return _objectSpread({}, state, {\n          conversation: _objectSpread({}, state.conversation, {\n            conversationData: updatedConversation\n          }),\n          message: '',\n          conversationList: state.conversationList.map(function (conversationData) {\n            if (conversationData.id === state.conversation.id) {\n              return _objectSpread({}, state.conversation, {\n                conversationData: updatedConversation\n              });\n            } else {\n              return conversationData;\n            }\n          })\n        });\n      }\n\n    case UPDATE_MESSAGE_VALUE:\n      {\n        return _objectSpread({}, state, {\n          message: action.payload\n        });\n      }\n\n    case UPDATE_SEARCH_CHAT_USER:\n      {\n        return _objectSpread({}, state, {\n          searchChatUser: action.payload\n        });\n      }\n\n    case FETCH_ALL_CHAT_USER_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          contactList: action.payload.filter(function (user) {\n            return !user.recent;\n          }),\n          chatUsers: action.payload.filter(function (user) {\n            return user.recent;\n          }),\n          loader: false\n        });\n      }\n\n    case FETCH_ALL_CHAT_USER_CONVERSATION_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          conversationList: conversationList\n        });\n      }\n\n    case SHOW_MESSAGE:\n      {\n        return _objectSpread({}, state, {\n          alertMessage: action.payload,\n          showMessage: true,\n          loader: false\n        });\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:\\Users\\Noelia\\Desktop\\compra\\source\\src\\reducers\\Chat.js"],"names":["Moment","users","conversationList","FETCH_ALL_CHAT_USER_CONVERSATION_SUCCESS","FETCH_ALL_CHAT_USER_SUCCESS","FILTER_CONTACT","FILTER_USERS","ON_HIDE_LOADER","ON_SELECT_USER","ON_TOGGLE_DRAWER","SHOW_MESSAGE","SUBMIT_COMMENT","UPDATE_MESSAGE_VALUE","UPDATE_SEARCH_CHAT_USER","USER_INFO_STATE","INIT_STATE","loader","userNotFound","drawerState","selectedSectionId","userState","searchChatUser","contactList","filter","user","recent","selectedUser","message","chatUsers","conversation","state","action","type","payload","name","toLowerCase","indexOf","id","find","data","updatedConversation","conversationData","concat","format","map","alertMessage","showMessage"],"mappings":"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","sourcesContent":["import Moment from 'moment';\r\nimport users from 'app/routes/chatPanel/data/chatUsers';\r\nimport conversationList from 'app/routes/chatPanel/data/conversationList';\r\nimport {\r\n  FETCH_ALL_CHAT_USER_CONVERSATION_SUCCESS,\r\n  FETCH_ALL_CHAT_USER_SUCCESS,\r\n  FILTER_CONTACT,\r\n  FILTER_USERS,\r\n  ON_HIDE_LOADER,\r\n  ON_SELECT_USER,\r\n  ON_TOGGLE_DRAWER,\r\n  SHOW_MESSAGE,\r\n  SUBMIT_COMMENT,\r\n  UPDATE_MESSAGE_VALUE,\r\n  UPDATE_SEARCH_CHAT_USER\r\n} from 'constants/ActionTypes';\r\nimport {USER_INFO_STATE} from '../constants/ActionTypes';\r\n\r\n\r\nconst INIT_STATE = {\r\n  loader: true,\r\n  userNotFound: 'No user found',\r\n  drawerState: false,\r\n  selectedSectionId: '',\r\n  userState: 1,\r\n  searchChatUser: '',\r\n  // contactList: [], onlt for production\r\n  contactList: users.filter((user) => !user.recent),\r\n  selectedUser: null,\r\n  message: '',\r\n  // chatUsers: [],\r\n  // conversationList: [], //ony for prod\r\n  chatUsers: users.filter((user) => user.recent),\r\n  conversationList: conversationList,\r\n  conversation: null\r\n};\r\n\r\n\r\nexport default (state = INIT_STATE, action) => {\r\n\r\n  switch (action.type) {\r\n    case FILTER_CONTACT: {\r\n      if (action.payload === '') {\r\n        return {\r\n          ...state, contactList: users.filter(user => !user.recent)\r\n        }\r\n      } else {\r\n        return {\r\n          ...state, contactList: users.filter((user) =>\r\n            !user.recent && user.name.toLowerCase().indexOf(action.payload.toLowerCase()) > -1\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    case FILTER_USERS: {\r\n      if (action.payload === '') {\r\n        return {\r\n          ...state, chatUsers: users.filter(user => !user.recent)\r\n        }\r\n      } else {\r\n        return {\r\n          ...state, chatUsers: users.filter((user) =>\r\n            !user.recent && user.name.toLowerCase().indexOf(action.payload.toLowerCase()) > -1\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    case ON_SELECT_USER: {\r\n      return {\r\n        ...state,\r\n        loader: true,\r\n        drawerState: false,\r\n        selectedSectionId: action.payload.id,\r\n        selectedUser: action.payload,\r\n        conversation: state.conversationList.find((data) => data.id === action.payload.id)\r\n      }\r\n    }\r\n    case ON_TOGGLE_DRAWER: {\r\n      return {...state, drawerState: !state.drawerState}\r\n    }\r\n    case ON_HIDE_LOADER: {\r\n      return {...state, loader: false}\r\n    }\r\n    case USER_INFO_STATE: {\r\n      return {...state, userState: action.payload}\r\n    }\r\n\r\n    case SUBMIT_COMMENT: {\r\n      const updatedConversation = state.conversation.conversationData.concat({\r\n        'type': 'sent',\r\n        'message': state.message,\r\n        'sentAt': Moment().format('hh:mm:ss A'),\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        conversation: {\r\n          ...state.conversation, conversationData: updatedConversation\r\n        },\r\n        message: '',\r\n        conversationList: state.conversationList.map(conversationData => {\r\n          if (conversationData.id === state.conversation.id) {\r\n            return {...state.conversation, conversationData: updatedConversation};\r\n          } else {\r\n            return conversationData;\r\n          }\r\n        })\r\n\r\n      }\r\n    }\r\n\r\n    case UPDATE_MESSAGE_VALUE: {\r\n      return {...state, message: action.payload}\r\n    }\r\n\r\n    case UPDATE_SEARCH_CHAT_USER: {\r\n      return {...state, searchChatUser: action.payload}\r\n    }\r\n\r\n    case FETCH_ALL_CHAT_USER_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        contactList: action.payload.filter((user) => !user.recent),\r\n        chatUsers: action.payload.filter((user) => user.recent),\r\n        loader: false,\r\n      }\r\n    }\r\n    case FETCH_ALL_CHAT_USER_CONVERSATION_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        conversationList: conversationList\r\n      }\r\n    }\r\n    case SHOW_MESSAGE: {\r\n      return {\r\n        ...state,\r\n        alertMessage: action.payload,\r\n        showMessage: true,\r\n        loader: false\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}